<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ko2ic Blog]]></title>
  <link href="http://ko2ic.github.io/atom.xml" rel="self"/>
  <link href="http://ko2ic.github.io/"/>
  <updated>2014-06-19T22:46:12+09:00</updated>
  <id>http://ko2ic.github.io/</id>
  <author>
    <name><![CDATA[Koji Ishii]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dropwizard-testingが便利でした]]></title>
    <link href="http://ko2ic.github.io/blog/2014/06/19/dropwizard-test/"/>
    <updated>2014-06-19T22:41:09+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/06/19/dropwizard-test</id>
    <content type="html"><![CDATA[<p>Qiitaに書きました。</p>

<p>dropwizardはテストを書くのも簡単でした。  <br/>
特にIntegration Testが気楽に書ける気がします。</p>

<p><a href="http://qiita.com/ko2ic/items/b59447a75952703e809a">http://qiita.com/ko2ic/items/b59447a75952703e809a</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[いますぐ採用すべきJavaフレームワークDropWizard(その3)]]></title>
    <link href="http://ko2ic.github.io/blog/2014/06/13/dropwizard-3/"/>
    <updated>2014-06-13T00:39:13+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/06/13/dropwizard-3</id>
    <content type="html"><![CDATA[<p>Qiitaに書きました。 <br/>
元々、3回くらいの記事にまとめようと思って書いたので、一つ一つの記事にあまり、関連性がありません。  <br/>
また、説明も下手（喋るのも文章もどっちも言っている意味がわからない人）なので読みづらいかもしれません。</p>

<p><a href="http://qiita.com/ko2ic/items/8110f5959315d3255ae9">http://qiita.com/ko2ic/items/8110f5959315d3255ae9</a></p>

<p>他の人にも有用になるように、なるべく自分の意見を記述しないで、事実のみを書くつもりでした。    <br/>
が、今読み返してみると自分の考えを多々書いてありますね。 <br/>
自分には客観的に書くのは難しかったです。</p>

<p>今後、Dropwizardについてもっと勉強しようと思ったことは、以下になります。</p>

<ul>
<li>Guiceか、何かのDIコンテナを使って、Resourceではないクラス（例えば、Facade）をトランザクション境界にしてみる。</li>
<li>単体テスト周り（dropwizard-testing）</li>
<li>Hibernate・JDBIでないFWに変えてみる</li>
<li>自作のManaged ObjectsやCommandsなどを試してみる</li>
</ul>


<p>です。</p>

<p>気になる点は、ホットデプロイの機能が今のところ無さそうなところです。 <br/>
そういう意味では、Spring Bootの勉強もやろうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropwizard(Java)でrailsのようにDBマイグレーションをする]]></title>
    <link href="http://ko2ic.github.io/blog/2014/06/13/dropwizard-liquibase/"/>
    <updated>2014-06-13T00:33:09+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/06/13/dropwizard-liquibase</id>
    <content type="html"><![CDATA[<p>Qiitaに書きました。</p>

<p><a href="http://qiita.com/ko2ic/items/02da56fd64ec39562bec">http://qiita.com/ko2ic/items/02da56fd64ec39562bec</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[いますぐ採用すべきJavaフレームワークDropWizard(その２)]]></title>
    <link href="http://ko2ic.github.io/blog/2014/06/13/dropwizard-2/"/>
    <updated>2014-06-13T00:31:18+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/06/13/dropwizard-2</id>
    <content type="html"><![CDATA[<p>Qiitaに書きました。</p>

<p><a href="http://qiita.com/ko2ic/items/069c5f75823fd8964bfa">http://qiita.com/ko2ic/items/069c5f75823fd8964bfa</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[いますぐ採用すべきJavaフレームワークDropWizard(その１)]]></title>
    <link href="http://ko2ic.github.io/blog/2014/06/13/dropwizard-1/"/>
    <updated>2014-06-13T00:26:18+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/06/13/dropwizard-1</id>
    <content type="html"><![CDATA[<p>Qiitaに書きました。</p>

<p><a href="http://qiita.com/ko2ic/items/cfe5b2f4593b705f9463">http://qiita.com/ko2ic/items/cfe5b2f4593b705f9463</a></p>

<p>あんまりJava関連はQiitaでは流行ってないと思っていたので、たくさんストックされててびっくりしました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac環境構築（CocoaPods）]]></title>
    <link href="http://ko2ic.github.io/blog/2014/05/27/cocoapods/"/>
    <updated>2014-05-27T20:17:09+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/05/27/cocoapods</id>
    <content type="html"><![CDATA[<p>環境構築でiphone開発のことを忘れていたので追加</p>

<h2>CocoaPods</h2>

<p><a href="http://ko2ic.github.io/blog/2014/05/21/octopress/" title="Octopress構築">Ruby</a>でruby環境は整っているので、CocoaPodsをインストールする.</p>

<pre><code>$ gem install -V cocoapods
$ rbenv rehash
$ which pod
~/.rbenv/shims/pod
</code></pre>

<p>~/.cocoapodsを作成してライブラリの管理をする準備をするために以下のコマンド。</p>

<pre><code>$ pod setup
Setup completed (read-only access)
</code></pre>

<p>試しにPodfileのあるディレクトリで</p>

<pre><code>$ pod install
・・・
Integrating client project
</code></pre>

<h2>Alcatraz</h2>

<p>Xcode上でテンプレートやテーマやPluginをインストールできるPlugin。以下でインストール。</p>

<pre><code>curl -fsSL https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh | sh
</code></pre>

<p>Xcodeで「xcworkspace」ファイルを開く <br/>
メニューのWindow > Package Managerがあれば成功</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipseの設定ファイルの場所]]></title>
    <link href="http://ko2ic.github.io/blog/2014/05/25/eclipse-settings/"/>
    <updated>2014-05-25T20:20:30+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/05/25/eclipse-settings</id>
    <content type="html"><![CDATA[<p>qiitaに書きました。 <br/>
<a href="http://qiita.com/ko2ic/items/4ae027e5f70b8a595ed0">http://qiita.com/ko2ic/items/4ae027e5f70b8a595ed0</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[+luaなvimをインストール]]></title>
    <link href="http://ko2ic.github.io/blog/2014/05/22/vim-lua/"/>
    <updated>2014-05-22T22:30:41+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/05/22/vim-lua</id>
    <content type="html"><![CDATA[<p>neocompleteを使おうと思ったら+luaなvimが必要らしいのでインストール</p>

<p>luaをインストール</p>

<pre><code>$ brew install lua
</code></pre>

<p>+luaなvimをインストール</p>

<pre><code>$ brew install vim --with-lua
</code></pre>

<p>確認してみる</p>

<pre><code>$ vim --version | grep lua
-lua
</code></pre>

<p>+luaになっていない！?<br/>
インストール時のオプションを確認</p>

<pre><code>$ brew options vim
--with-lua
        Build vim with lua support
</code></pre>

<p>ちゃんとできてるな・・・</p>

<pre><code>$ which vim
/usr/bin/vim
</code></pre>

<p>なるほど。標準のvimが使われてたのね。
PATHを確認</p>

<pre><code>$ echo $PATH
/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
</code></pre>

<p>なるほど。homebrewのvimは<code>/usr/local/bin</code>にあるので先に宣言されてる方が使われてたのね。
PATHの順序を変える</p>

<figure class='code'><figcaption><span>.bash_profile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">PATH</span><span class="o">=</span>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
</span></code></pre></td></tr></table></div></figure>


<p>確認</p>

<pre><code>$ vim --version | grep lua
+lua
</code></pre>

<p>成功！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress構築]]></title>
    <link href="http://ko2ic.github.io/blog/2014/05/21/octopress/"/>
    <updated>2014-05-21T00:00:20+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/05/21/octopress</id>
    <content type="html"><![CDATA[<p>OSのクリーンインストールをしたのでこのブログも入れ直す</p>

<h2>ソースを取得</h2>

<p>自分の場合はbitbuketにこのブログを保存しているので、そこから取得する</p>

<pre><code>$ git clone  git@bitbucket.org:&lt;user name&gt;/ko2ic.github.io.git
</code></pre>

<p>初めての場合はoctopress本体を取得する</p>

<pre><code>$ git clone git@github.com:imathis/octopress.git
</code></pre>

<h2>ruby</h2>

<p>自分の環境はhomebrewでreadline,ruby-build,rbenvをインストール済みです。<br/>
詳しくは<a href="https://github.com/ko2ic/dotfiles">こちらを参考</a></p>

<pre><code>$ brew bundle
</code></pre>

<p>PATHにrbenvを通す<br/>
古い記事だと~/.rbenv/binになっているので注意。</p>

<figure class='code'><figcaption><span>.bash_profile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">HOME</span><span class="k">}</span>/.rbenv/shims:<span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure>


<p>rubyはrbenvでインストールする</p>

<pre><code>$ rbenv install 2.1.0
$ rbenv rehash
</code></pre>

<p>rbenvで使用するrubyバージョンを指定する。</p>

<pre><code>$ rbenv global 2.1.0
$ rbenv global
2.1.0
</code></pre>

<p>bundlerをインストール</p>

<pre><code>$ rbenv exec gem install bundler
$ rbenv exec gem list
bigdecimal (1.2.3)
bundler (1.6.2)
io-console (0.4.2)
json (1.8.1)
minitest (4.7.5)
psych (2.0.2)
rake (10.1.0)
rdoc (4.1.0)
test-unit (2.1.0.0)
</code></pre>

<!-- more -->


<h2>octopress初期設定</h2>

<p>このプロジェクト用の必要なgemをインストール</p>

<pre><code>$ bundle install --path vendor/bundle
</code></pre>

<p>github pageに設定する<br/>
デプロイ先を聞かれるので入力する。下は自分の場合です。</p>

<pre><code>$ bundle exec rake setup_github_pages
 git@github.com:ko2ic/ko2ic.github.io.git
</code></pre>

<h2>ブログを書く</h2>

<p>ページを作成する<br/>
ここのtitleはurlに使われるので注意。</p>

<pre><code>$ rake new_post['title']
$ bundle exec rake generate
</code></pre>

<p>ローカルで検証する <a href="http://localhost:4000">http://localhost:4000</a></p>

<pre><code>$ bundle exec rake preview
</code></pre>

<p>別のターミナルで以下を入力しておくことで、rake generateしなくても変更を検知してリビルドしてくれる</p>

<pre><code>$ bundle exec rake watch
</code></pre>

<h2>bitbuketへ</h2>

<h4>まだbitbcketで管理してない場合</h4>

<p>bitbuketという名前で管理する</p>

<pre><code>$ git remote add bitbucket git@bitbucket.org:&lt;user name&gt;/ko2ic.github.io.git
$ git add -a -m "add article"
$ git push -u bitbucket source
</code></pre>

<h3>自分のbitbuketから取得した場合</h3>

<p>自分のbitbuketから取得しているので、origin</p>

<pre><code>$ git commit -a -m "add article"
$ git push origin source
</code></pre>

<h2>参考</h2>

<p>ruby周りは以下のサイトを参考にしました
<a href="http://qiita.com/emadurandal/items/a60886152a4c99ce1017">http://qiita.com/emadurandal/items/a60886152a4c99ce1017</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac環境構築手順]]></title>
    <link href="http://ko2ic.github.io/blog/2014/05/20/mac-env-init2/"/>
    <updated>2014-05-20T20:43:42+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/05/20/mac-env-init2</id>
    <content type="html"><![CDATA[<p>前回は、手動での作業を書いたので、今日は半自動な構築部分を記述しておきます。</p>

<h2>Macportsからhomebrewへ</h2>

<p>ずーとmacportsを使っていたのですが、homebrew-caskで.dmgなアプリも自動で入れたいので、今更ですが乗り換えました。</p>

<p>macportsにも利点があって、それは「/optにすべてがインストールされる」に集約されると思います。<br/>
例えば</p>

<ul>
<li>ディレクトリrsyncすれば他のmacと共通の環境ができる</li>
<li>問題が起きたときなどにoptをrenameしてみて、入れ直したり、元に戻したりが気楽にできる</li>
<li>/usr/localは自分で入れたものにしかない状態はわかりやすい</li>
</ul>


<p>こういった利点があるので変えていなかったのですが、その利点を余りあるほどcaskが便利そうだと思ったので乗り換えました。</p>

<p>この記事ではすでにgithubで管理しているBrewfileを使うので細かい説明は書きません。（そこら中に記事があるので自分が書く必要もないので） <br/>
よって完全に自分のためだけのメモになります。</p>

<!-- more -->


<h2>dotfiles</h2>

<p>${HOME}に.bash_profileなどの自分用の設定をおきます。</p>

<pre><code>$ git clone https://github.com/ko2ic/dotfiles.git
$ cd dotfiles
$ chmod 766 dotfiles.sh
$ ./dotfiles.sh
$ source ~/.bash_profile
</code></pre>

<h2>Xcode</h2>

<ul>
<li>App StoreからXcodeを検索してインストール</li>
<li>Xcodeを起動して同意する</li>
<li><code>$ xcode-select -install</code>でCommand Line Toolをインストール</li>
</ul>


<h2>homebrew &amp; cask</h2>

<p>Brewfileに記述したアプリをインストールします。</p>

<pre><code>$ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
$ brew bundle
</code></pre>

<h2>NeoBundle</h2>

<pre><code>$ curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh | sh
$ vim .
:NeoBundleInstall
</code></pre>

<h2>Git Settings</h2>

<pre><code>$ git config --global user.name "kouji ishii"
$ git config --global user.email ko2ic.dev@gmail.com
$ git config --global core.excludesfile ~/.gitignore
$ git config --global core.editor "/usr/local/bin/vim"
</code></pre>

<h2>Screen</h2>

<p>縦分割できるScreenを使いたいので個別に入れます。</p>

<pre><code>$ brew install --HEAD -f screen
</code></pre>

<h2>アプリ設定</h2>

<h4>Alfred</h4>

<p>ホットキーをaltのダブルタップに変更する</p>

<p><img src="http://ko2ic.github.io/images/mac-env-init/alfred.png" alt="alfred" /></p>

<h4>divvy</h4>

<p>以下のURLのように設定をする</p>

<p><a href="http://mizage.com/help/accessibility.html">http://mizage.com/help/accessibility.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac環境構築手順(GUI編)]]></title>
    <link href="http://ko2ic.github.io/blog/2014/05/18/mac-env-init/"/>
    <updated>2014-05-18T19:20:40+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/05/18/mac-env-init</id>
    <content type="html"><![CDATA[<p>macをクリーンインストールすることになったので、環境構築を自分用の備忘録として残しておきます。<br/>
基本的に自分が使いやすいようにしています。</p>

<h2>このページで書かないこと</h2>

<ul>
<li>homebrew-caskやdotfileなど自動でできること</li>
</ul>


<h2>このページで書くこと</h2>

<ul>
<li>GUIで設定すること</li>
<li>defaultsコマンドで設定すること</li>
</ul>


<h4>defaultsコマンドについて</h4>

<p>defaultsコマンドは「plist」と呼ばれるアプリやシステムの設定ファイルに、設定値を追加、変更、削除、検索するコマンドで以下のファイルが変更されます。</p>

<pre><code>~/Library/Preferences/~.plist
</code></pre>

<p>以下のコマンドで上記のファイルを表示します</p>

<pre><code>defaults read キー名
</code></pre>

<p>以下でキーに対応する値を削除できる<br>
但しキー自体は削除されないのでplistファイル自体を削除します。</p>

<pre><code>defaults delete キー名
</code></pre>

<p>それぞれの隠し機能のコマンドで変更した場合は以下のように再起動をして反映させましょう。</p>

<pre><code>killall Finder
killall Dock
</code></pre>

<!-- more -->


<h2>キーボード</h2>

<p>システム環境設定　→　キーボード　→　</p>

<h4>capsキー変更（日本語キーボード）</h4>

<p>macは、windowsでのショートカットで利用するCtrlの役割がcommandになる。<br/>
（例：command+C コピー）<br>
windowsのCtrlの位置がmacのcapsの位置にあるので、同じ配置でできるように変更する</p>

<p>→　修飾キー<br>　
Caps Lock を Commandに変更</p>

<p><img src="http://ko2ic.github.io/images/mac-env-init/keyboard-caps-change.png" alt="caps" /></p>

<h4>ファンクションキーの動作を変更</h4>

<p>デフォルトでは以下の動作になるために逆になるように変更する</p>

<ul>
<li>F1キーだけを押下するとディスプレイが暗くなる</li>
<li>fnキー+F1でファンクションキーの動作</li>
</ul>


<p>→　F1、F2などの・・・にチェックを入れる</p>

<p><img src="http://ko2ic.github.io/images/mac-env-init/keyboard-function-key.png" alt="function" /></p>

<h3>Windowの切り替え</h3>

<p>Windowsと同じようにalt+Tabで同じアプリで開いているWindowの切り替えができるようにします。</p>

<p>→ ショートカット→ キーボード<br>
次のウィンドウを操作対象にするをデフォルトの⌘ + F1から変更する</p>

<p><img src="http://ko2ic.github.io/images/mac-env-init/keyboard-window.png" alt="window" /></p>

<h2>トラッックパッド</h2>

<p>システム環境設定　→　トラックバッド　→</p>

<p>画像のようにすると使いやすい
<img src="http://ko2ic.github.io/images/mac-env-init/trackpad1.png" alt="trackpad1" />
<img src="http://ko2ic.github.io/images/mac-env-init/trackpad2.png" alt="trackpad2" /></p>

<h2>Finder</h2>

<p>Finder →　環境設定　→　詳細</p>

<h4>拡張子を表示</h4>

<p>「すべてのファイル名拡張子を表示」をチェック</p>

<h4>確実にごみ箱を空にする</h4>

<p>チェックする</p>

<h4>検索実行時の検索対象を変更</h4>

<p>「検索実行時」を「現在のフォルダ内を検索」</p>

<p><img src="http://ko2ic.github.io/images/mac-env-init/finder1.png" alt="finder" /></p>

<h4>新規Finderで開く先を変更</h4>

<p>一般タブで「新規Finderウィンドウで次を表示」でホームを選択する</p>

<h4>隠しファイルを表示する</h4>

<p>デフォルトではFinder上で「.」ファイルは不可視なのでこれを変更する</p>

<pre><code>defaults write com.apple.finder AppleShowAllFiles -boolean true
</code></pre>

<h4>終了できるようにする</h4>

<p>デフォルトではFinderに終了がないのでこれを変更する</p>

<pre><code>defaults write com.apple.finder QuitMenuItem -bool true
</code></pre>

<h4>タイトルにフルパスを表示する</h4>

<p>ウインドウタイトルにもパスを表示する</p>

<pre><code>defaults write com.apple.finder _FXShowPosixPathInTitle -bool true
</code></pre>

<h4>ネットワーク上に.DS_Storeを作らない</h4>

<p>Mac OS Xでは、フォルダの表示形式を変更すると「.DS_Store」という不可視ファイルができるが、これをネットワーク上には作らなくする</p>

<pre><code>defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool YES
</code></pre>

<h2>Dock</h2>

<p> システム環境設定→　Dock</p>

<h4>Dockを自動で隠す</h4>

<p><img src="http://ko2ic.github.io/images/mac-env-init/dock.png" alt="Dock" /></p>

<h4>隠しているアプリを半透明で表示する</h4>

<pre><code>defaults write com.apple.Dock showhidden -boolean true
</code></pre>

<h2>Mission Control</h2>

<p> システム環境設定→　Mission Control</p>

<p><img src="http://ko2ic.github.io/images/mac-env-init/mission-control.png" alt="mission" /></p>

<h4>ダッシュボードを起動させない</h4>

<pre><code>defaults write com.apple.dashboard mcx-disabled -boolean YES
</code></pre>

<h2>その他</h2>

<h4>残バッテリーを表示する</h4>

<p><img src="http://ko2ic.github.io/images/mac-env-init/percent.png" alt="battery" /></p>

<h4>HardDiskが遅いので早くしたい</h4>

<p>Spotlightのインデックス作成が、頻繁に行われているため、HDDが一杯になってくると、かなり遅くなります。<br>
Spotlightを使っていないなら、下記の手順でインデックス作成をしないようにすれば、緩和されます。<br>
「システム環境設定」→「Spotlight」→「プライバシー」で、除するパスを指定すると、インデックスの作成はされなくなりますが、Alfredはこのインデックスを利用しているので考えて設定しましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse MarketPlaceに自作のPluginを登録する]]></title>
    <link href="http://ko2ic.github.io/blog/2014/04/24/eclipse-marketplace/"/>
    <updated>2014-04-24T02:45:41+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/04/24/eclipse-marketplace</id>
    <content type="html"><![CDATA[<p>自作のEclipse Pluginの登録は簡単です。</p>

<p>qiitaに書きました。
<a href="http://qiita.com/ko2ic/items/a602deccc88d3a11e527">http://qiita.com/ko2ic/items/a602deccc88d3a11e527</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自動生成したJavaコードに手を加えても綺麗にマージしてくれるJmerge]]></title>
    <link href="http://ko2ic.github.io/blog/2014/04/23/jmerge/"/>
    <updated>2014-04-23T22:25:51+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/04/23/jmerge</id>
    <content type="html"><![CDATA[<p>8年くらい前にお世話になっていた会社で「おじさんplugin」というJavaコードを自動生成するEclipse Pluginがありました。<br/>
コードの自動生成ツールはよく見たのですが、このPluginは他とはレベルが違う完成度でした。<br/>
そう感じた理由の一つに、生成したコードを手修正しても綺麗にマージしてくれるからです。（当時見たときは衝撃的でした） <br/>
最近、自動生成するPluginのある仕事をやっているので、同じようにできないかを試してみました。</p>

<p>Qiitaに書きました。
<a href="http://qiita.com/ko2ic/items/eb8107bd74ab510e0a6d">http://qiita.com/ko2ic/items/eb8107bd74ab510e0a6d</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipseプラグインを簡単に作成する]]></title>
    <link href="http://ko2ic.github.io/blog/2014/04/23/tycho/"/>
    <updated>2014-04-23T03:35:07+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/04/23/tycho</id>
    <content type="html"><![CDATA[<p>qiitaに書きました。
<a href="http://qiita.com/ko2ic/items/a3b8aceb1275dfee2943">http://qiita.com/ko2ic/items/a3b8aceb1275dfee2943</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OctopressのサイドバーにQiitaに投稿した人気記事を表示させる方法]]></title>
    <link href="http://ko2ic.github.io/blog/2014/04/21/octopress-qiita-aside/"/>
    <updated>2014-04-21T21:19:01+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/04/21/octopress-qiita-aside</id>
    <content type="html"><![CDATA[<h2>方法</h2>

<p>1.Qiitaと同じアイコンを使いたいので、<a href="http://fortawesome.github.io/Font-Awesome/">Font Awesome</a>を使う。</p>

<p>今回は、CDNを使うが、ダウンロードして配置してもよい。</p>

<figure class='code'><figcaption><span>./source/_includes/custom/head.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>2./source/_includes/custom/asidesに本体を記述する</p>

<p>Qiitaに人気の投稿を取得するAPIがないので、全記事を取得してソートしています。</p>

<figure class='code'><figcaption><span>qiita.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>Qiita 人気の投稿<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;qiita_post&quot;</span> <span class="na">class=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s2">&quot;https://qiita.com/api/v1/users/ko2ic/items&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>        <span class="err">#</span> <span class="err">全投稿を取得して人気順に並び替える</span>
</span><span class='line'>        <span class="nx">response</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">stock_count</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">stock_count</span><span class="p">;</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">b</span> <span class="o">-</span> <span class="nx">a</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">length</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">response</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">aTag</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;a/&gt;&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">title</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">,</span><span class="nx">data</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">iStockTag</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;i/&gt;&quot;</span><span class="p">).</span><span class="nx">css</span><span class="p">({</span><span class="s2">&quot;color&quot;</span><span class="o">:</span><span class="s2">&quot;#000&quot;</span><span class="p">,</span><span class="s2">&quot;margin-right&quot;</span><span class="o">:</span><span class="s2">&quot;1em&quot;</span><span class="p">}).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span><span class="s2">&quot;fa fa-folder-o&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">iStockTag</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;  &quot;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">stock_count</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">iCommentTag</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;i/&gt;&quot;</span><span class="p">).</span><span class="nx">css</span><span class="p">({</span><span class="s2">&quot;color&quot;</span><span class="o">:</span><span class="s2">&quot;#000&quot;</span><span class="p">}).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span><span class="s2">&quot;fa fa-folder-o&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">iCommentTag</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;  &quot;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">comment_count</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">pTag</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;p/&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">pTag</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">iStockTag</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">pTag</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">iCommentTag</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">liTag</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;li/&gt;&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span><span class="s2">&quot;post&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;data-qiita-stock&quot;</span><span class="p">,</span><span class="nx">data</span><span class="p">.</span><span class="nx">stock_count</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">aTag</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">pTag</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#qiita_post&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">liTag</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="err">#</span> <span class="err">指定した投稿数だけ表示する</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="o">===</span> <span class="p"></span> <span class="o">-</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<ol>
<li>./_config.ymlに記述する</li>
</ol>


<figure class='code'><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>qiita_user: user_name
</span><span class='line'>qiita_display_count: 5
</span><span class='line'>
</span><span class='line'>default_asides:[custom/asides/qiita.html]
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>全記事を取得しているので、投稿数が多い場合はパフォーマンスが悪くなると思います。<br/>
その場合は、最近の記事を表示するのものいいでしょう。
両方に対応したソースは、githubにあります。
<a href="https://github.com/ko2ic/octopress-qiita-aside">https://github.com/ko2ic/octopress-qiita-aside</a>
なにかあれば、pull requestでもお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mavenですべての設定ファイルを自動生成させる方法]]></title>
    <link href="http://ko2ic.github.io/blog/2014/04/19/maven-eclipse/"/>
    <updated>2014-04-19T20:24:48+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/04/19/maven-eclipse</id>
    <content type="html"><![CDATA[<p>いまさらmavenです。が、今回の記事のことはやったことなかったので残しておきます。</p>

<p>qiitaに書きました。<br/>
<a href="http://qiita.com/ko2ic/items/39be03afbc6c38c409ea">http://qiita.com/ko2ic/items/39be03afbc6c38c409ea</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress始めてみた！]]></title>
    <link href="http://ko2ic.github.io/blog/2014/04/15/first-octopress/"/>
    <updated>2014-04-15T19:58:32+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/04/15/first-octopress</id>
    <content type="html"><![CDATA[<p>初心に帰って技術ブログでも始めようかと。<br/>
<a href="http://qiita.com/ko2ic">Qiita</a>との棲み分けはどうしよう。 <br/>
感想とか自分の考えはこちらに書けばいいけど、技術的な内容はどうしようか。<br/>
ブログと言えども同じ内容を書くのはDRY原則に反するから、悩み中。  <br/>
まあ、でも試しに両方に書いて見ようかな。</p>

<p><strong>2014/5/25追記 </strong>  <br/>
Qiitaと両方に書いてみたけど、両方書くのは面倒くさかった。 <br/>
なので、技術的なことで他の人に有用なものはQiitaだけに記述します。
このブログにはそれ以外とQiitaへのリンクを書いていきます。</p>
]]></content>
  </entry>
  
</feed>
