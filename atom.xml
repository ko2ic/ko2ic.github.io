<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[悩みがネタ]]></title>
  <link href="http://ko2ic.github.io/atom.xml" rel="self"/>
  <link href="http://ko2ic.github.io/"/>
  <updated>2014-10-23T00:46:33+09:00</updated>
  <id>http://ko2ic.github.io/</id>
  <author>
    <name><![CDATA[Koji Ishii]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ツールとして利用できるDropwizard]]></title>
    <link href="http://ko2ic.github.io/blog/2014/08/07/dropwizard-as-tool/"/>
    <updated>2014-08-07T01:47:37+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/08/07/dropwizard-as-tool</id>
    <content type="html"><![CDATA[<p>Dropwizardはwebアプリとしてではなく、ユーザに配布するツールを作成するときにも役に立ちます。</p>

<p>どういうことかというと、dropwizard-configurationというjarだけを利用しましょうということです。<br></p>

<p>詳しくは、<a href="http://qiita.com/ko2ic/items/7cefba83be29f8129595">Dropwizardで気軽にユーザ向けのツールを作成する </a>に記述しています。</p>

<p>自分の場合で恐縮なのですが、ソフトアーキテクチャで意識するのは、プロジェクト間の依存関係を疎結合にすることです。<br>
そうすることで、いつでも他のプロジェクトでも利用できるし、その部分だけをまるっと気軽に交換できるからです。<br></p>

<p>Dropwizardではまさにそれを高いレベルでやってのけています。<br>
なので、RESTフレームワークであるはずのDropwizardをwebとは関係のないツールで便利に利用できるわけです。</p>

<p>この記事も以前書いた「<a href="http://qiita.com/ko2ic/items/b59447a75952703e809a">dropwizard-testingが便利でした</a>」と同じくらい有用なことを書いたつもりなので、ぜひ試してみてください。<br></p>

<p>サンプルソースはこちらです。<br>
<a href="https://github.com/ko2ic/spike-groovy-executable-jar">https://github.com/ko2ic/spike-groovy-executable-jar</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerメモ]]></title>
    <link href="http://ko2ic.github.io/blog/2014/07/04/docker/"/>
    <updated>2014-07-04T19:00:53+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/07/04/docker</id>
    <content type="html"><![CDATA[<p>「VagrantでVirtualBox内でubuntuを動かして、そのubuntu内でdockerコンテナを起動して、その中でubuntuを動かす」<br>
という文章にするとややこしいことをすぐ忘れるので自分用にメモしておく。       <br/>
（この記事ではVagrant1.6からのDocker Provider・boot2dockerを使わない）</p>

<h2>Vagrant</h2>

<p><a href="http://www.vagrantbox.es/">Vagrant Box</a>から適切なBoxを選択する。</p>

<p>まずは、VirtualBox内で動作するubuntuのBoxを使ってVagrantfileを作成する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant init ubuntu-docker https://oss-binaries.phusionpassenger.com/vagrant/boxes/latest/ubuntu-14.04-amd64-vbox.box </span></code></pre></td></tr></table></div></figure>


<p>作成した後に、vagrant起動。            <br/>
この時にboxをローカルに配置している。     <br/>
boxの配置される場所は <code>~/.vagrant.d/boxes</code> 。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant up</span></code></pre></td></tr></table></div></figure>


<p>ちなみにvagrant終了はこれ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant halt</span></code></pre></td></tr></table></div></figure>


<p>ちなみに破棄はこれ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant destroy</span></code></pre></td></tr></table></div></figure>


<p>再起動はこれ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant reload</span></code></pre></td></tr></table></div></figure>


<p>VirtualBox内で動作するubuntuにsshで接続する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh
</span><span class='line'>vagrant@ubuntu-14:~$</span></code></pre></td></tr></table></div></figure>


<h2>Dockerインストール</h2>

<p>VirtualBox内で動作するubuntuにはdockerがinstallされていないので、installする。    <br/>
この際にインストールするのは <code>docker</code> ではなくて、 <code>docker.io</code> 。     <br/>
全く違うものなので、間違えるとこんなエラーが出るので注意。<br>
<a href="https://gist.github.com/kjellski/6158747">参考記事</a>    <br/>
 <code>Segmentation Fault or Critical Error encountered. Dumping core and aborting.</code></p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ docker -v
</span><span class='line'>The program 'docker' is currently not installed. You can install it by typing:
</span><span class='line'>
</span><span class='line'>vagrant@ubuntu-14:~$ sudo apt-get install docker.io
</span><span class='line'>vagrant@ubuntu-14:~$ sudo ln -sf /usr/bin/docker.io /usr/local/bin/docker</span></code></pre></td></tr></table></div></figure>


<p>再度バージョンを調べる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ docker -v
</span><span class='line'>Docker version 0.9.1, build 3600720</span></code></pre></td></tr></table></div></figure>


<p>バージョンが古いので最新にする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ curl -s https://get.docker.io/ubuntu/ | sudo sh
</span><span class='line'>vagrant@ubuntu-14:~$ docker -v
</span><span class='line'>The program 'docker' is currently not installed.</span></code></pre></td></tr></table></div></figure>


<p>認識しなくなった。。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ which docker
</span><span class='line'>/usr/bin/docker</span></code></pre></td></tr></table></div></figure>


<p>なるほど。前作ったシンボリックリンクが邪魔なのね。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ sudo rm /usr/local/bin/docker
</span><span class='line'>vagrant@ubuntu-14:~$ source .bashrc
</span><span class='line'>vagrant@ubuntu-14:~$ docker -v
</span><span class='line'>Docker version 1.0.1, build 990021a</span></code></pre></td></tr></table></div></figure>


<p>無事新しくなった。        <br/>
dockerデーモンが動いている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ ps aux | grep docker
</span><span class='line'>root      6066  1.3  1.5 495764 15664 ?        Ssl  07:30   0:35 /usr/bin/docker -d
</span><span class='line'>vagrant   6298  0.0  0.0  11744   920 pts/0    S+   08:13   0:00 grep --color=auto docker</span></code></pre></td></tr></table></div></figure>


<h2>Docker使い方メモ</h2>

<h3>docker run</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ sudo docker run ubuntu /bin/cat /proc/version
</span><span class='line'>Linux version 3.13.0-24-generic (buildd@panlong) (gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1) ) #46-Ubuntu SMP Thu Apr 10 19:11:08 UTC 2014</span></code></pre></td></tr></table></div></figure>


<p>これで、以下のことが起きるらしい</p>

<ul>
<li>最初はubuntuイメージを<a href="https://registry.hub.docker.com/">DockerのRepository</a>から取得</li>
<li>ubuntuイメージを使ってdockerデーモンが新規に起動したコンテナ内で <code>cat</code> コマンドを実行</li>
</ul>


<p>docker内で起動しているコンテナ内で作業をしたいので、標準入力を開く <code>-i</code> と端末を割り当てる <code>-t</code> を付けて起動してみる。    <br/>
起動後、上記と同じコマンドを叩くと確かに同じubuntu。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ sudo docker run -it ubuntu /bin/bash
</span><span class='line'>root@968e85928a5a:/# cat /proc/version
</span><span class='line'>Linux version 3.13.0-24-generic (buildd@panlong) (gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1) ) #46-Ubuntu SMP Thu Apr 10 19:11:08 UTC 2014</span></code></pre></td></tr></table></div></figure>


<p>docker内のプロセスはbashしか動いていないとのことなので確かめてみる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@968e85928a5a:/# ps aux
</span><span class='line'>USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
</span><span class='line'>root         1  0.0  0.1  18156  1964 ?        Ss   08:17   0:00 /bin/bash
</span><span class='line'>root        15  0.0  0.1  15568  1144 ?        R+   08:25   0:00 ps aux</span></code></pre></td></tr></table></div></figure>


<p>確かにbashだけだった。</p>

<p>バックグランドで動作させるために <code>-d</code> でデーモンモードにする</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ sudo docker run -t -d ubuntu /usr/bin/perl -e 'while(1){print "Hello\n"; sleep 1}'
</span><span class='line'>fdeecfacf4377cc7e81bf780b0f0bc197c45058c2b490174037db8a8f64b7598</span></code></pre></td></tr></table></div></figure>


<h3>docker ps</h3>

<p>起動中のコンテナ一覧を表示する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ sudo docker ps
</span><span class='line'>CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES
</span><span class='line'>fdeecfacf437        ubuntu:latest       "/usr/bin/perl -e 'w   5 minutes ago       Up 5 minutes                            trusting_brattain</span></code></pre></td></tr></table></div></figure>


<p>以下からのコマンドは、CONTAINER IDを引数にとるので、aliasにしておく</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ alias cid='sudo docker ps -l -q'</span></code></pre></td></tr></table></div></figure>


<p>すでに終了したコンテナを含めて一覧表示する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ sudo docker ps -a</span></code></pre></td></tr></table></div></figure>


<h3>docker logs</h3>

<p>起動中のコンテナのログを出力する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ sudo docker logs `cid`
</span><span class='line'>Hello
</span><span class='line'>Hello</span></code></pre></td></tr></table></div></figure>


<p>コンテナのステータスの詳細をjson形式で出力する</p>

<h3>docker inspect</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ sudo docker inspect `cid`
</span><span class='line'>{
</span><span class='line'>    "Args": [
</span><span class='line'>        "-e",
</span><span class='line'>        "while(1){print \"Hello\\n\"; sleep 1}"
</span><span class='line'>    ],
</span><span class='line'>    "Config": {
</span><span class='line'>        "AttachStderr": false,
</span><span class='line'>        "AttachStdin": false,
</span><span class='line'>        "AttachStdout": false,
</span><span class='line'>        "Cmd": [
</span><span class='line'>            "/usr/bin/perl",
</span><span class='line'>            "-e",
</span><span class='line'>            "while(1){print \"Hello\\n\"; sleep 1}"
</span><span class='line'>        ],
</span><span class='line'>        "CpuShares": 0,
</span><span class='line'>        "Cpuset": "",
</span><span class='line'>        "Domainname": "",
</span><span class='line'>        "Entrypoint": null,
</span><span class='line'>        "Env": [
</span><span class='line'>            "HOME=/",
</span><span class='line'>            "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
</span><span class='line'>        ],
</span><span class='line'>        "ExposedPorts": null,
</span><span class='line'>        "Hostname": "fdeecfacf437",
</span><span class='line'>        "Image": "ubuntu",
</span><span class='line'>・・・
</span></code></pre></td></tr></table></div></figure>


<h3>docker attach</h3>

<p>コンテナにアタッチして端末制御を取得する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ sudo docker attach `cid`
</span><span class='line'>Hello</span></code></pre></td></tr></table></div></figure>


<h3>docker kill</h3>

<p>起動中のコンテナを終了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ sudo docker kill `cid`
</span><span class='line'>fdeecfacf437</span></code></pre></td></tr></table></div></figure>


<h3>docker images</h3>

<p>dockerが管理しているイメージ一覧表示</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ sudo docker images
</span><span class='line'>REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>ubuntu              latest              e54ca5efa2e9        2 weeks ago         276.5 MB</span></code></pre></td></tr></table></div></figure>


<h3>docker commit</h3>

<p>自作のイメージを作るためのコマンド</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ sudo docker commit `cid` ko2ic/test
</span><span class='line'>vagrant@ubuntu-14:~$ sudo docker images
</span><span class='line'>REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>ko2ic/test         latest              8a7aadadc161        11 minutes ago      276.5 MB
</span><span class='line'>ubuntu              latest              e54ca5efa2e9        2 weeks ago         276.5 MB</span></code></pre></td></tr></table></div></figure>


<h3>docker rmi</h3>

<p>イメージを削除するコマンド</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ sudo docker rmi -f 8a7aadadc161
</span><span class='line'>Deleted: 8a7aadadc16131a6bccdce922e64a94fe8b615091b8cfa1a01d7d4ee2b0caeb8</span></code></pre></td></tr></table></div></figure>


<h3>コンテナでネットワークサービスを提供</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ sudo docker run -it base /bin/bash
</span><span class='line'>root@ce1526db2356:/# apt-get install -y memcached
</span><span class='line'>root@ce1526db2356:/# exit
</span><span class='line'>vagrant@ubuntu-14:~$ sudo docker commit `cid` ko2ic/memcached
</span><span class='line'>vagrant@ubuntu-14:~$ sudo docker images
</span><span class='line'>REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>ko2ic/memcached     latest              64c0c7c2dba1        34 seconds ago      224.3 MB
</span><span class='line'>ubuntu              latest              e54ca5efa2e9        2 weeks ago         276.5 MB
</span><span class='line'>vagrant@ubuntu-14:~$ sudo docker run -p 11211 -it ko2ic/memcached /usr/bin/memcached -u memcache -vv
</span></code></pre></td></tr></table></div></figure>


<p>別のターミナルで接続確認</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh
</span><span class='line'>vagrant@ubuntu-14:~$ sudo docker ps
</span><span class='line'>CONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS              PORTS                      NAMES
</span><span class='line'>481bf32d1fd6        ko2ic/memcached:latest   /usr/bin/memcached -   4 seconds ago       Up 4 seconds        0.0.0.0:49153-&gt;11211/tcp   cocky_bartik
</span><span class='line'>48b171c2c366        ubuntu:latest            /bin/bash              About an hour ago   Up About an hour                               furious_pike
</span><span class='line'>vagrant@ubuntu-14:~$ sudo docker inspect 481bf32d1fd6
</span><span class='line'>・・・
</span><span class='line'>    "NetworkSettings": {
</span><span class='line'>        "Bridge": "docker0",
</span><span class='line'>        "Gateway": "172.17.42.1",
</span><span class='line'>        "IPAddress": "172.17.0.22",
</span><span class='line'>        "IPPrefixLen": 16,
</span><span class='line'>        "PortMapping": null,
</span><span class='line'>        "Ports": {
</span><span class='line'>            "11211/tcp": [
</span><span class='line'>                {
</span><span class='line'>                    "HostIp": "0.0.0.0",
</span><span class='line'>                    "HostPort": "49153"
</span><span class='line'>・・・
</span><span class='line'>vagrant@ubuntu-14:~$ telnet 172.17.0.22 11211
</span><span class='line'>Trying 172.17.0.22...
</span><span class='line'>Connected to 172.17.0.22.
</span><span class='line'>Escape character is '^]'.
</span><span class='line'>stat ← このコマンドを打つとサーバー側でも同じ文言が表示されて通信されているのがわかる
</span><span class='line'>ERROR
</span><span class='line'>quit</span></code></pre></td></tr></table></div></figure>


<h3>docker port</h3>

<p>portのマッピングを表示する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ sudo docker port 481bf32d1fd6 11211
</span><span class='line'>0.0.0.0:49153
</span><span class='line'>vagrant@ubuntu-14:~$ telnet localhost 49153</span></code></pre></td></tr></table></div></figure>


<p>コンテナ側の11211ポートがlocalhostの49153ポートにマッピングされている</p>

<p>次はmac側からmemcachedを触れるようにする</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim Vagrantfile
</span><span class='line'>・・・
</span><span class='line'>config.vm.network "forwarded_port", guest: 49153, host: 49153
</span><span class='line'>・・・
</span><span class='line'>$ vagrant up
</span><span class='line'>$ vagrant ssh
</span><span class='line'>vagrant@ubuntu-14:~$ sudo docker run -p 11211 -it ko2ic/memcached /usr/bin/memcached -u memcache -vv</span></code></pre></td></tr></table></div></figure>


<p>別のターミナル（mac）で接続してみる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ telnet localhost 49153
</span><span class='line'>Trying ::1...
</span><span class='line'>telnet: connect to address ::1: Connection refused
</span><span class='line'>Trying 127.0.0.1...
</span><span class='line'>Connected to localhost.
</span><span class='line'>Escape character is '^]'.
</span><span class='line'>stat
</span><span class='line'>ERROR</span></code></pre></td></tr></table></div></figure>


<p>接続成功。</p>

<h3>Dockerfile</h3>

<p>dockerイメージの構築をここに記述することで手動で <code>docker commit</code> などをしなくても良くなる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~$ mkdir docker
</span><span class='line'>vagrant@ubuntu-14:~/docker$ vim Dockerfile
</span><span class='line'>FROM ubuntu
</span><span class='line'>
</span><span class='line'>RUN apt-get update
</span><span class='line'>RUN apt-get install -y memcached
</span><span class='line'>RUN apt-get clean
</span><span class='line'>
</span><span class='line'>CMD ["/usr/bin/memcached", "-vv"]
</span><span class='line'>USER memcached
</span><span class='line'>
</span><span class='line'>vagrant@ubuntu-14:~/docker$ sudo docker build -t ko2ic/memcached2 ~/docker/</span></code></pre></td></tr></table></div></figure>


<p>Dockerfileの <code>CMD</code> は <code>docker run</code> 時の起動コマンドになる         <br/>
イメージができているか確認後、起動してみる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@ubuntu-14:~/docker$ sudo docker images
</span><span class='line'>REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>ko2ic/memcached2    latest              6ba44a313a00        30 seconds ago      282.8 MB
</span><span class='line'>
</span><span class='line'>vagrant@ubuntu-14:~/docker$ sudo docker run -p 11211 -it ko2ic/memcached2
</span><span class='line'>・・・
</span><span class='line'>&lt;29 server listening (udp)
</span><span class='line'>・・・</span></code></pre></td></tr></table></div></figure>


<p>他のターミナルで接続してみると成功していることがわかる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ telnet localhost 49153
</span><span class='line'>Trying ::1...
</span><span class='line'>telnet: connect to address ::1: Connection refused
</span><span class='line'>Trying 127.0.0.1...
</span><span class='line'>Connected to localhost.
</span><span class='line'>Escape character is '^]'.
</span><span class='line'>stat
</span><span class='line'>ERROR</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring BootとDropwizardのアプリコード比較]]></title>
    <link href="http://ko2ic.github.io/blog/2014/06/29/springboot-dropwizard/"/>
    <updated>2014-06-29T21:54:04+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/06/29/springboot-dropwizard</id>
    <content type="html"><![CDATA[<p>Spring BootとDropwizardの比較をしてみました。<br>
記事は<a href="http://qiita.com/ko2ic/items/742fe630246848137c20">こちら</a>です。</p>

<p>以下は自分の意見です。<br></p>

<p>いまのところはDropwizardの方がいいかなぁというのが結論です。</p>

<p>ソースの比較をするとSpring Bootの方が記述量も少なくて優れているように思えます。<br>  <br/>
しかし、実際はDropwizardでは迷うことがなく実装ができ、Spring Bootでは悩むことが多かったです。<br></p>

<p>おそらく、<br>
Spring Bootは多機能で色々なことができるためソースも多く、調査が大変 &ndash;> ごちゃついてる気がするのだと思います。<br>
ただ、この感覚は単純にDropwizardの得意な分野で比較したのが理由かもしれません。</p>

<p>ここで、話は脱線しますが、久々のSpringについても書いておきます。<br></p>

<p>Springに関しては元々大好きなフレームワークの一つです。<br>
ソースもきれいでわかりやすく、非常に勉強になりました。<br>
きれいなソースと言えば、Seasarプロジェクト（特に本体とSaStruts,S2JDBC）もそうでした。<br>
反対にStruts,Myfacesなどは汚いと思いました。<br>
(きれいなフレームワークは比較的に長生きしているので、その点Dropwizardもきれいなので長生きするかも）</p>

<p>今の時代では、当たり前に利用されているSpringですが、おそらく日本では業務で最も早く利用したプロジェクトに運良く参加していました。<br>
それからバージョン3まで仕事で利用し、Spring MVC, Spring Web Flow, Spring Batch, Spring Securityなど多くのSpringプロダクトを利用していました。</p>

<p>しかし、5年ぶりに実装してみて「こんなにめんどくさかったっけ？」と感じました。<br>
Springも巨大になりすぎたのかなと思います。<br>
手を動かしてはいないですが、ずーと追ってはいたので昔の知識で止まっていたわけではないつもりです。<br>
あれからGuiceなど軽量なDIができたこともあり、そちらで十分な気もします。<br></p>

<p>話は戻して、Spring BootとDropwizardについてです。<br>
Spring Bootは機能過多な気もしますが、それもメリットとも言えるので、慣れてくれば、Spring Bootの方が良くなるかもしれません。<br>
ちょっとしたホットデプロイならできるので、それも少しメリットかもしれません。<br>
(が、完全じゃないので微妙）</p>

<p>ただ、現在の感想としては<br>
RESTfulなアプリを早くシンプルに作るのであれば、自分だったらDropwizardを採用します。<br>
ソースもシンプルでわかり易く拡張もしやすいように感じます。<br>        <br/>
(いまの時代、単体テストという面だけでいうとDIである必要もあまりないと思っています。)</p>

<p>Spring Bootは機能過多になったSpringプロジェクトをうまいこと使い易くしてくれる可能性がありそうなので、今後に期待しています。<br>
もっと洗練されて昔のSpringのようにシンプルで、使い易いものになってほしいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DropwizardでGuiceを利用してトランザクション境界を変える]]></title>
    <link href="http://ko2ic.github.io/blog/2014/06/23/dropwizard-guice-ddd/"/>
    <updated>2014-06-23T23:12:24+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/06/23/dropwizard-guice-ddd</id>
    <content type="html"><![CDATA[<p>Dropwizardで試したいことの一つとして、トランザクション境界を変えるというものがありました。<br></p>

<p>今回は、それをDDDでやるためにguiceを使ってみました。<br></p>

<p>今の時代、DIコンテナを使う理由はほとんどトランザクション境界を永続化層に依存させたくないからじゃないのかなと思います。<br>
昔は、単体テストをできるようにすることがDIを使う主な目的でしたが、今はJmockitなどモックフレームワークの充実で、簡単に単体テストができる時代になりました。</p>

<p>ということで、トランザクション境界を変えてみたことをQiitaに記述しました。
<a href="http://qiita.com/ko2ic/items/409bfecfd806c2f903e1">http://qiita.com/ko2ic/items/409bfecfd806c2f903e1</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropwizard-testingが便利でした]]></title>
    <link href="http://ko2ic.github.io/blog/2014/06/19/dropwizard-test/"/>
    <updated>2014-06-19T22:41:09+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/06/19/dropwizard-test</id>
    <content type="html"><![CDATA[<p>dropwizardはテストを書くのも簡単でした。<br>
特にIntegration Testが気楽に書けました。<br></p>

<p><a href="http://qiita.com/ko2ic/items/b59447a75952703e809a">Qiitaに書いた記事</a>では、単体テストのたびにテーブルを再作成しています。<br></p>

<p>その際にLiquibaseのAPIを利用しています。<br>
実際のプロジェクトでもこの機構は使えます。</p>

<p>この記事はQitaやアクセス数を見ると全然人気がないのですが、自分の書いたDropwizardの中でももっとも有用な記事の一つではないかと思っていたります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropwizard(Java)でrailsのようにDBマイグレーションをする]]></title>
    <link href="http://ko2ic.github.io/blog/2014/06/13/dropwizard-liquibase/"/>
    <updated>2014-06-13T00:33:09+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/06/13/dropwizard-liquibase</id>
    <content type="html"><![CDATA[<p>DropwizardでのDBマイグレーションについて書きました。<br></p>

<p>ほとんどLiquibaseの説明です。
これを使うと「DBのスキーマをgitやSVNなどのソース管理システムで管理できる」のがとても良いです。<br></p>

<p>これによりJavaでもアジャイルに開発しやすくなると思います。</p>

<p>記事はこちらです。<br>
<a href="http://qiita.com/ko2ic/items/02da56fd64ec39562bec">http://qiita.com/ko2ic/items/02da56fd64ec39562bec</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[いますぐ採用すべきJavaフレームワークDropwizard]]></title>
    <link href="http://ko2ic.github.io/blog/2014/06/13/dropwizard/"/>
    <updated>2014-06-13T00:26:18+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/06/13/dropwizard</id>
    <content type="html"><![CDATA[<p>Dropwizardを使ってみたら、思った以上によかったので紹介します。<br></p>

<p>基本的なことはQiitaに三回に渡って記事にしているので参考にしてください。<br></p>

<ul>
<li><a href="http://qiita.com/ko2ic/items/cfe5b2f4593b705f9463">いますぐ採用すべきJavaフレームワークDropwizard その１</a></li>
<li><a href="http://qiita.com/ko2ic/items/069c5f75823fd8964bfa">いますぐ採用すべきJavaフレームワークDropwizard その２</a></li>
<li><a href="http://qiita.com/ko2ic/items/8110f5959315d3255ae9">いますぐ採用すべきJavaフレームワークDropwizard その３</a></li>
</ul>


<p>Qitaでは、Javaの記事を書いてもあまり人気ないと思っていましたが、想像以上にストックされていてびっくりしました。<br>
はてなブックマークされたら、一気に増えました。<br>
Dropwizardについては、この3つの記事よりも他の記事の方が意外と有用だったりしますが、入門記事はアクセス数が多いですね。</p>

<p>元々、3回くらいの記事にまとめようと思って書いたので、一つ一つの記事にあまり、関連性がありません。  <br/>
また、説明も下手（喋るのも文章もどっちも言っている意味がわからない人）なので読みづらいかもしれません。</p>

<p>他の人にも有用になるように、なるべく自分の意見を記述しないで、事実のみを書くつもりでした。    <br/>
が、今読み返してみると自分の考えを多々書いてありますね。 <br/>
自分には客観的に書くのは難しかったです。</p>

<p>今後、Dropwizardについてもっと勉強しようと思ったことは、以下になります。</p>

<ul>
<li>Guiceか、何かのDIコンテナを使って、Resourceではないクラス（例えば、Facade）をトランザクション境界にしてみる。</li>
<li>単体テスト周り（dropwizard-testing）</li>
<li>Hibernate・JDBIでないFWに変えてみる</li>
<li>自作のManaged ObjectsやCommandsなどを試してみる</li>
</ul>


<p>です。</p>

<p>気になる点は、ホットデプロイの機能が今のところ無さそうなところです。 <br/>
そういう意味では、Spring Bootの勉強もやろうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac環境構築（CocoaPods）]]></title>
    <link href="http://ko2ic.github.io/blog/2014/05/27/cocoapods/"/>
    <updated>2014-05-27T20:17:09+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/05/27/cocoapods</id>
    <content type="html"><![CDATA[<p>環境構築でiphone開発のことを忘れていたので追加</p>

<h2>CocoaPods</h2>

<p><a href="http://ko2ic.github.io/blog/2014/05/21/octopress/" title="Octopress構築">Octopress環境構築</a>でruby環境は整っているので、CocoaPodsをインストールする.</p>

<pre><code>$ gem install -V cocoapods
$ rbenv rehash
$ which pod
~/.rbenv/shims/pod
</code></pre>

<p>~/.cocoapodsを作成してライブラリの管理をする準備をするために以下のコマンド。</p>

<pre><code>$ pod setup
Setup completed (read-only access)
</code></pre>

<p>試しにPodfileのあるディレクトリで</p>

<pre><code>$ pod install
・・・
Integrating client project
</code></pre>

<h2>Alcatraz</h2>

<p>Xcode上でテンプレートやテーマやPluginをインストールできるPlugin。以下でインストール。</p>

<pre><code>curl -fsSL https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh | sh
</code></pre>

<p>Xcodeで「xcworkspace」ファイルを開く <br/>
メニューのWindow > Package Managerがあれば成功</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipseの設定ファイルの場所]]></title>
    <link href="http://ko2ic.github.io/blog/2014/05/25/eclipse-settings/"/>
    <updated>2014-05-25T20:20:30+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/05/25/eclipse-settings</id>
    <content type="html"><![CDATA[<p>Eclipseの記事です。<br></p>

<p>設定ファイルのできる場所を知っていると何かと便利になります。<br>
Eclipseを使っている場合は役に立つことがあると思います。</p>

<p>qiitaに書きました。<br>
<a href="http://qiita.com/ko2ic/items/4ae027e5f70b8a595ed0">http://qiita.com/ko2ic/items/4ae027e5f70b8a595ed0</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[+luaなvimをインストール]]></title>
    <link href="http://ko2ic.github.io/blog/2014/05/22/vim-lua/"/>
    <updated>2014-05-22T22:30:41+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/05/22/vim-lua</id>
    <content type="html"><![CDATA[<p>neocompleteを使おうと思ったら+luaなvimが必要らしいのでインストール</p>

<p>luaをインストール</p>

<pre><code>$ brew install lua
</code></pre>

<p>+luaなvimをインストール</p>

<pre><code>$ brew install vim --with-lua
</code></pre>

<p>確認してみる</p>

<pre><code>$ vim --version | grep lua
-lua
</code></pre>

<p>+luaになっていない！?<br/>
インストール時のオプションを確認</p>

<pre><code>$ brew options vim
--with-lua
        Build vim with lua support
</code></pre>

<p>ちゃんとできてるな・・・</p>

<pre><code>$ which vim
/usr/bin/vim
</code></pre>

<p>なるほど。標準のvimが使われてたのね。
PATHを確認</p>

<pre><code>$ echo $PATH
/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
</code></pre>

<p>なるほど。homebrewのvimは<code>/usr/local/bin</code>にあるので先に宣言されてる方が使われてたのね。
PATHの順序を変える</p>

<figure class='code'><figcaption><span>.bash_profile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">PATH</span><span class="o">=</span>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
</span></code></pre></td></tr></table></div></figure>


<p>確認</p>

<pre><code>$ vim --version | grep lua
+lua
</code></pre>

<p>成功！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress構築]]></title>
    <link href="http://ko2ic.github.io/blog/2014/05/21/octopress/"/>
    <updated>2014-05-21T00:00:20+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/05/21/octopress</id>
    <content type="html"><![CDATA[<p>OSのクリーンインストールをしたのでこのブログも入れ直す</p>

<h2>ソースを取得</h2>

<p>自分の場合はbitbuketにこのブログを保存しているので、そこから取得する</p>

<pre><code>$ git clone  git@bitbucket.org:&lt;user name&gt;/ko2ic.github.io.git
</code></pre>

<p>初めての場合はoctopress本体を取得する</p>

<pre><code>$ git clone git@github.com:imathis/octopress.git
</code></pre>

<h2>ruby</h2>

<p>自分の環境はhomebrewでreadline,ruby-build,rbenvをインストール済みです。<br/>
詳しくは<a href="https://github.com/ko2ic/dotfiles">こちらを参考</a></p>

<pre><code>$ brew bundle
</code></pre>

<p>PATHにrbenvを通す<br/>
古い記事だと~/.rbenv/binになっているので注意。</p>

<figure class='code'><figcaption><span>.bash_profile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">HOME</span><span class="k">}</span>/.rbenv/shims:<span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure>


<p>rubyはrbenvでインストールする</p>

<pre><code>$ rbenv install 2.1.0
$ rbenv rehash
</code></pre>

<p>rbenvで使用するrubyバージョンを指定する。</p>

<pre><code>$ rbenv global 2.1.0
$ rbenv global
2.1.0
</code></pre>

<p>bundlerをインストール</p>

<pre><code>$ rbenv exec gem install bundler
$ rbenv exec gem list
bigdecimal (1.2.3)
bundler (1.6.2)
io-console (0.4.2)
json (1.8.1)
minitest (4.7.5)
psych (2.0.2)
rake (10.1.0)
rdoc (4.1.0)
test-unit (2.1.0.0)
</code></pre>

<!-- more -->


<h2>octopress初期設定</h2>

<p>このプロジェクト用の必要なgemをインストール</p>

<pre><code>$ bundle install --path vendor/bundle
</code></pre>

<p>github pageに設定する<br/>
デプロイ先を聞かれるので入力する。下は自分の場合です。</p>

<pre><code>$ bundle exec rake setup_github_pages
 git@github.com:ko2ic/ko2ic.github.io.git
</code></pre>

<h2>ブログを書く</h2>

<p>ページを作成する<br/>
ここのtitleはurlに使われるので注意。</p>

<pre><code>$ rake new_post['title']
$ bundle exec rake generate
</code></pre>

<p>ローカルで検証する <a href="http://localhost:4000">http://localhost:4000</a></p>

<pre><code>$ bundle exec rake preview
</code></pre>

<p>別のターミナルで以下を入力しておくことで、rake generateしなくても変更を検知してリビルドしてくれる</p>

<pre><code>$ bundle exec rake watch
</code></pre>

<h2>本番に反映する</h2>

<pre><code>$ bundle exec rake gen_deploy
</code></pre>

<h2>bitbuketへ</h2>

<h4>まだbitbcketで管理してない場合</h4>

<p>bitbuketという名前で管理する</p>

<pre><code>$ git remote add bitbucket git@bitbucket.org:&lt;user name&gt;/ko2ic.github.io.git
$ git add -a -m "add article"
$ git push -u bitbucket source
</code></pre>

<h3>自分のbitbuketから取得した場合</h3>

<p>自分のbitbuketから取得しているので、origin</p>

<pre><code>$ git commit -a -m "add article"
$ git push origin source
</code></pre>

<h2>参考</h2>

<p>ruby周りは以下のサイトを参考にしました。<br>
<a href="http://qiita.com/emadurandal/items/a60886152a4c99ce1017">http://qiita.com/emadurandal/items/a60886152a4c99ce1017</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac環境構築手順]]></title>
    <link href="http://ko2ic.github.io/blog/2014/05/20/mac-env-init2/"/>
    <updated>2014-05-20T20:43:42+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/05/20/mac-env-init2</id>
    <content type="html"><![CDATA[<p>前回は、手動での作業を書いたので、今日は半自動な構築部分を記述しておきます。</p>

<h2>Macportsからhomebrewへ</h2>

<p>ずーとmacportsを使っていました。<br>
しかし、homebrew-caskで.dmgなアプリも自動で入れたいので、今更ですが乗り換えました。</p>

<p>macportsにも利点があります。<br>
それは「/optにすべてがインストールされる」に集約されると思います。<br/>
例えば</p>

<ul>
<li>ディレクトリrsyncすれば他のmacと共通の環境ができる</li>
<li>問題が起きたときなどにoptをrenameしてみて、入れ直したり、元に戻したりが気楽にできる</li>
<li>/usr/localは自分で入れたものにしかない状態はわかりやすい</li>
</ul>


<p>こういった利点があるのでmacportsを使っていましたが、その利点を余りあるほどcaskが便利そうだと思ったので乗り換えました。</p>

<p>この記事ではすでにgithubで管理しているBrewfileを使うので細かい説明は書きません。<br>
（自分が書くよりもわかりやすい記事がたくさんあります）<br>
よって完全に自分のためだけのメモになります。</p>

<!-- more -->


<h2>dotfiles</h2>

<p>${HOME}に.bash_profileなどの自分用の設定をおきます。</p>

<pre><code>$ git clone https://github.com/ko2ic/dotfiles.git
$ cd dotfiles
$ chmod 766 dotfiles.sh
$ ./dotfiles.sh
$ source ~/.bash_profile
</code></pre>

<h2>Xcode</h2>

<ul>
<li>App StoreからXcodeを検索してインストール</li>
<li>Xcodeを起動して同意する</li>
<li><code>$ xcode-select --install</code>でCommand Line Toolをインストール</li>
</ul>


<h2>homebrew &amp; cask</h2>

<p>Brewfileに記述したアプリをインストールします。</p>

<pre><code>$ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
$ brew bundle
</code></pre>

<h2>NeoBundle</h2>

<pre><code>$ curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh | sh
$ vim .
:NeoBundleInstall
</code></pre>

<h2>Git Settings</h2>

<pre><code>$ git config --global user.name "kouji ishii"
$ git config --global user.email ko2ic.dev@gmail.com
$ git config --global core.excludesfile ~/.gitignore
$ git config --global core.editor "/usr/local/bin/vim"
</code></pre>

<h2>Screen</h2>

<p>縦分割できるScreenを使いたいので個別に入れます。</p>

<pre><code>$ brew install --HEAD -f screen
</code></pre>

<h2>アプリ設定</h2>

<h4>Alfred</h4>

<p>ホットキーをaltのダブルタップに変更する</p>

<p><img src="http://ko2ic.github.io/images/mac-env-init/alfred.png" alt="alfred" /></p>

<h4>divvy</h4>

<p>以下のURLのように設定をする</p>

<p><a href="http://mizage.com/help/accessibility.html">http://mizage.com/help/accessibility.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac環境構築手順(GUI編)]]></title>
    <link href="http://ko2ic.github.io/blog/2014/05/18/mac-env-init/"/>
    <updated>2014-05-18T19:20:40+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/05/18/mac-env-init</id>
    <content type="html"><![CDATA[<p>macをクリーンインストールすることになったので、環境構築を自分用の備忘録として残しておきます。<br/>
基本的に自分が使いやすいようにしています。</p>

<h2>このページで書かないこと</h2>

<ul>
<li>Githubで管理しているdotfileやhomebrew-caskなど自動でできること</li>
</ul>


<h2>このページで書くこと</h2>

<ul>
<li>GUIで設定すること</li>
<li>defaultsコマンドで設定すること</li>
</ul>


<h4>defaultsコマンドについて</h4>

<p>defaultsコマンドは「plist」と呼ばれるアプリやシステムの設定ファイルに、設定値を追加、変更、削除、検索するコマンドで以下のファイルが変更されます。</p>

<pre><code>~/Library/Preferences/~.plist
</code></pre>

<p>以下のコマンドで上記のファイルを表示します</p>

<pre><code>defaults read キー名
</code></pre>

<p>以下でキーに対応する値を削除できる<br>
但しキー自体は削除されないのでplistファイル自体を削除します。</p>

<pre><code>defaults delete キー名
</code></pre>

<p>それぞれの隠し機能のコマンドで変更した場合は以下のように再起動をして反映させましょう。</p>

<pre><code>killall Finder
killall Dock
</code></pre>

<!-- more -->


<h2>キーボード</h2>

<p>システム環境設定　→　キーボード　→　</p>

<h4>capsキー変更（日本語キーボード）</h4>

<p>macは、windowsでのショートカットで利用するCtrlの役割がcommandになる。<br/>
（例：command+C コピー）<br>
windowsのCtrlの位置がmacのcapsの位置にあるので、同じ配置でできるように変更する</p>

<p>→　修飾キー<br>　
Caps Lock を Commandに変更</p>

<p><img src="http://ko2ic.github.io/images/mac-env-init/keyboard-caps-change.png" alt="caps" /></p>

<h4>ファンクションキーの動作を変更</h4>

<p>デフォルトでは以下の動作になるために逆になるように変更する</p>

<ul>
<li>F1キーだけを押下するとディスプレイが暗くなる</li>
<li>fnキー+F1でファンクションキーの動作</li>
</ul>


<p>→　F1、F2などの・・・にチェックを入れる</p>

<p><img src="http://ko2ic.github.io/images/mac-env-init/keyboard-function-key.png" alt="function" /></p>

<h3>Windowの切り替え</h3>

<p>Windowsと同じようにalt+Tabで同じアプリで開いているWindowの切り替えができるようにします。</p>

<p>→ ショートカット→ キーボード<br>
次のウィンドウを操作対象にするをデフォルトの⌘ + F1から変更する</p>

<p><img src="http://ko2ic.github.io/images/mac-env-init/keyboard-window.png" alt="window" /></p>

<h2>トラッックパッド</h2>

<p>システム環境設定　→　トラックバッド　→</p>

<p>画像のようにすると使いやすい
<img src="http://ko2ic.github.io/images/mac-env-init/trackpad1.png" alt="trackpad1" />
<img src="http://ko2ic.github.io/images/mac-env-init/trackpad2.png" alt="trackpad2" /></p>

<h2>Finder</h2>

<p>Finder →　環境設定　→　詳細</p>

<h4>拡張子を表示</h4>

<p>「すべてのファイル名拡張子を表示」をチェック</p>

<h4>確実にごみ箱を空にする</h4>

<p>チェックする</p>

<h4>検索実行時の検索対象を変更</h4>

<p>「検索実行時」を「現在のフォルダ内を検索」</p>

<p><img src="http://ko2ic.github.io/images/mac-env-init/finder1.png" alt="finder" /></p>

<h4>新規Finderで開く先を変更</h4>

<p>一般タブで「新規Finderウィンドウで次を表示」でホームを選択する</p>

<h4>隠しファイルを表示する</h4>

<p>デフォルトではFinder上で「.」ファイルは不可視なのでこれを変更する</p>

<pre><code>defaults write com.apple.finder AppleShowAllFiles -boolean true
</code></pre>

<h4>終了できるようにする</h4>

<p>デフォルトではFinderに終了がないのでこれを変更する</p>

<pre><code>defaults write com.apple.finder QuitMenuItem -bool true
</code></pre>

<h4>タイトルにフルパスを表示する</h4>

<p>ウインドウタイトルにもパスを表示する</p>

<pre><code>defaults write com.apple.finder _FXShowPosixPathInTitle -bool true
</code></pre>

<h4>ネットワーク上に.DS_Storeを作らない</h4>

<p>Mac OS Xでは、フォルダの表示形式を変更すると「.DS_Store」という不可視ファイルができるが、これをネットワーク上には作らなくする</p>

<pre><code>defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool YES
</code></pre>

<h2>Dock</h2>

<p> システム環境設定→　Dock</p>

<h4>Dockを自動で隠す</h4>

<p><img src="http://ko2ic.github.io/images/mac-env-init/dock.png" alt="Dock" /></p>

<h4>隠しているアプリを半透明で表示する</h4>

<pre><code>defaults write com.apple.Dock showhidden -boolean true
</code></pre>

<h2>Mission Control</h2>

<p> システム環境設定→　Mission Control</p>

<p><img src="http://ko2ic.github.io/images/mac-env-init/mission-control.png" alt="mission" /></p>

<h4>ダッシュボードを起動させない</h4>

<pre><code>defaults write com.apple.dashboard mcx-disabled -boolean YES
</code></pre>

<h2>その他</h2>

<h4>残バッテリーを表示する</h4>

<p><img src="http://ko2ic.github.io/images/mac-env-init/percent.png" alt="battery" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse MarketPlaceに自作のPluginを登録する]]></title>
    <link href="http://ko2ic.github.io/blog/2014/04/24/eclipse-marketplace/"/>
    <updated>2014-04-24T02:45:41+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/04/24/eclipse-marketplace</id>
    <content type="html"><![CDATA[<p>またまた、Eclipse Pluginです。<br>
いまさら感が半端ないのですが、Jmergeを使ったサンプル的に作ったPluginを公開しました。<br></p>

<p>Excelからenumを生成するpluginです。<br>
サンプル的に作ったので、たいして便利ではないですが、Jmergeの良さはわかると思います。<br>
<a href="http://marketplace.eclipse.org/content/comment-tag-gen#.U-JC_IB_uwE">Comment Tag Gen</a></p>

<p>自作のEclipse Pluginの登録は簡単でした。<br>
Qiitaに方法を記述しています。<br>
<a href="http://qiita.com/ko2ic/items/a602deccc88d3a11e527">http://qiita.com/ko2ic/items/a602deccc88d3a11e527</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自動生成したJavaコードに手を加えても綺麗にマージしてくれるJmerge]]></title>
    <link href="http://ko2ic.github.io/blog/2014/04/23/jmerge/"/>
    <updated>2014-04-23T22:25:51+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/04/23/jmerge</id>
    <content type="html"><![CDATA[<p>Jmergeについて記事を書きました。<br></p>

<p>意外と知られていないのですが、これは便利です。<br>
Javaのソースを自動生成させるときには相当いいと思います。<br></p>

<p>9年くらい前にお世話になっていた会社で「おじさんplugin」というJavaコードを自動生成するEclipse Pluginがありました。<br></p>

<p>コードの自動生成ツールはよく見たのですが、このPluginは他とはレベルが違う完成度でした。<br>
そう感じた理由の一つに、生成したコードを手修正しても綺麗にマージしてくれるからです。（当時見たときは衝撃的でした）<br></p>

<p>それを実現させていたのがJmergeになります。<br></p>

<p>最近、自動生成するPluginのある仕事をやっているので、試してみました。</p>

<p>記事はこちらになります。<br>
<a href="http://qiita.com/ko2ic/items/eb8107bd74ab510e0a6d">http://qiita.com/ko2ic/items/eb8107bd74ab510e0a6d</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipseプラグインを簡単に作成する]]></title>
    <link href="http://ko2ic.github.io/blog/2014/04/23/tycho/"/>
    <updated>2014-04-23T03:35:07+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/04/23/tycho</id>
    <content type="html"><![CDATA[<p>Eclipse関連の記事を書きました。</p>

<p>昔はEclipse Pluginを作るのが難しい（というより面倒）だったのですが、今はTychoがあります。<br>
Tychoを利用するとEclipse Pluginは簡単に作れます。<br></p>

<p>ただ、そのまま利用するよりも、mavenのarchetypeから作成すればもっと簡単に作れます。</p>

<p>バージョンが古い状態で放置されていたのでtychoのarchetypeを公開している方にPull Requestを送って最新に変えてもらいました。</p>

<p>詳しくはこちらに記述しています。<br>
<a href="http://qiita.com/ko2ic/items/a3b8aceb1275dfee2943">http://qiita.com/ko2ic/items/a3b8aceb1275dfee2943</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OctopressのサイドバーにQiitaに投稿した人気記事を表示させる方法]]></title>
    <link href="http://ko2ic.github.io/blog/2014/04/21/octopress-qiita-aside/"/>
    <updated>2014-04-21T21:19:01+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/04/21/octopress-qiita-aside</id>
    <content type="html"><![CDATA[<h2>概要</h2>

<p>OctopressのサイドバーにQitaの投稿した記事を表示します。<br>
自分はブログとは別にQiitaに記述しています。<br>
他人にQiitaに書いていることを一見してわかってもらうことが目的です。</p>

<h2>方法</h2>

<p>1.Qiitaと同じアイコンを使いたいので、<a href="http://fortawesome.github.io/Font-Awesome/">Font Awesome</a>を使う。</p>

<p>今回は、CDNを使うが、ダウンロードして配置してもよい。</p>

<figure class='code'><figcaption><span>./source/_includes/custom/head.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>2./source/_includes/custom/asidesに本体を記述する</p>

<p>Qiitaに人気の投稿を取得するAPIがないので、全記事を取得してソートしています。</p>

<figure class='code'><figcaption><span>qiita.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>Qiita 人気の投稿<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;qiita_post&quot;</span> <span class="na">class=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s2">&quot;https://qiita.com/api/v1/users/ko2ic/items&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>        <span class="err">#</span> <span class="err">全投稿を取得して人気順に並び替える</span>
</span><span class='line'>        <span class="nx">response</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">stock_count</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">stock_count</span><span class="p">;</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">b</span> <span class="o">-</span> <span class="nx">a</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">length</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">response</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">aTag</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;a/&gt;&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">title</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">,</span><span class="nx">data</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">iStockTag</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;i/&gt;&quot;</span><span class="p">).</span><span class="nx">css</span><span class="p">({</span><span class="s2">&quot;color&quot;</span><span class="o">:</span><span class="s2">&quot;#000&quot;</span><span class="p">,</span><span class="s2">&quot;margin-right&quot;</span><span class="o">:</span><span class="s2">&quot;1em&quot;</span><span class="p">}).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span><span class="s2">&quot;fa fa-folder-o&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">iStockTag</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;  &quot;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">stock_count</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">iCommentTag</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;i/&gt;&quot;</span><span class="p">).</span><span class="nx">css</span><span class="p">({</span><span class="s2">&quot;color&quot;</span><span class="o">:</span><span class="s2">&quot;#000&quot;</span><span class="p">}).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span><span class="s2">&quot;fa fa-folder-o&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">iCommentTag</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;  &quot;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">comment_count</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">pTag</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;p/&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">pTag</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">iStockTag</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">pTag</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">iCommentTag</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">liTag</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;li/&gt;&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span><span class="s2">&quot;post&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;data-qiita-stock&quot;</span><span class="p">,</span><span class="nx">data</span><span class="p">.</span><span class="nx">stock_count</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">aTag</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">pTag</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#qiita_post&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">liTag</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="err">#</span> <span class="err">指定した投稿数だけ表示する</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="o">===</span> <span class="p"></span> <span class="o">-</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<ol>
<li>./_config.ymlに記述する</li>
</ol>


<figure class='code'><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>qiita_user: user_name
</span><span class='line'>qiita_display_count: 5
</span><span class='line'>
</span><span class='line'>default_asides:[custom/asides/qiita.html]
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>全記事を取得しているので、投稿数が多い場合はパフォーマンスが悪くなると思います。<br>
その場合は、最近の記事を表示するのものいいでしょう。<br></p>

<br>


<p>両方に対応したソースは、<a href="https://github.com/ko3ic/octopress-qiita-aside">github</a>
におきました。<br>
なにかあれば、pull requestでもお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mavenですべての設定ファイルを自動生成させる方法]]></title>
    <link href="http://ko2ic.github.io/blog/2014/04/19/maven-eclipse/"/>
    <updated>2014-04-19T20:24:48+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/04/19/maven-eclipse</id>
    <content type="html"><![CDATA[<p>いまさらですが、mavenについて記事にしました。</p>

<p>eclipseの設定をmavenコマンドで作成する方法です。<br/>
mavenはバージョン1の頃から使っていましたが、この方法はやってませんでした。<br>
やってみると結構便利でもっと早く試しておけばよかったです。</p>

<p>maven使っている方はぜひ試して見て下さい。</p>

<p>記事はこちらになります。<br>
<a href="http://qiita.com/ko2ic/items/39be03afbc6c38c409ea">http://qiita.com/ko2ic/items/39be03afbc6c38c409ea</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress始めてみた！]]></title>
    <link href="http://ko2ic.github.io/blog/2014/04/15/first-octopress/"/>
    <updated>2014-04-15T19:58:32+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/04/15/first-octopress</id>
    <content type="html"><![CDATA[<p>初心にかえり技術ブログを復活させます。
過去ログはどっかにいきました。</p>

<h2>Qiitaとの棲み分けについて</h2>

<p><a href="http://qiita.com/ko3ic">Qiita</a>とこのブログの両方に同じ内容を書いたところ、面倒でした。   <br/>
なので、技術的なことはなるべくQiitaに記述します。</p>

<p>「なるべく」とするのは、Qiitaに既出の内容でも自分で試したいこともあるからです。<br>
その場合には、こちらのブログに書いていきたいと思います。<br></p>

<p>Qiitaには自分の意見を極力書かずに、こちらに記述したいと思います。</p>
]]></content>
  </entry>
  
</feed>
