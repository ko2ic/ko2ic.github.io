<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dropwizard | ko2ic Blog]]></title>
  <link href="http://ko2ic.github.io/blog/categories/dropwizard/atom.xml" rel="self"/>
  <link href="http://ko2ic.github.io/"/>
  <updated>2014-07-05T03:04:29+09:00</updated>
  <id>http://ko2ic.github.io/</id>
  <author>
    <name><![CDATA[Koji Ishii]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring BootとDropwizardのアプリコード比較]]></title>
    <link href="http://ko2ic.github.io/blog/2014/06/29/springboot-dropwizard/"/>
    <updated>2014-06-29T21:54:04+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/06/29/springboot-dropwizard</id>
    <content type="html"><![CDATA[<p>Spring BootとDropwizardの比較をQiitaに記述しました。</p>

<p>ソースの比較をするとSpring Bootの方が記述量も少なくて優れているように思えます。  <br/>
しかし、実際はDropwizardでは迷うことがなく実装ができ、Spring Bootでは悩むことが多かったです。  <br/>
そうなったのはおそらく、Spring Bootは多機能で色々なことができるため、調べるのが大変なのとAuto Configurationがわかりづらいくさせているように思えます。(もちろんこれはこれで便利です)</p>

<p>Springに関しては元々大好きなフレームワークの一つで、1.0時代から3まで仕事で利用し、Spring MVC, Spring Web Flow, Spring Batch, Spring Securityなど多くのSpringプロダクトを利用していました。
しかし、5年くらい利用していないので忘れている部分もあるかもしれませんが、「こんなにめんどくさかったっけ？」と感じました。</p>

<p>ただ、この感覚は単純にDropwizardの得意な分野で比較したのと、Spring自体を忘れているだけなのかもしれません。
慣れくるとSpring Bootは機能も多く、ホットデプロイもできるので、こちらの方が良くなるかもしれません。</p>

<p>しかし、いま現在の率直な感想を書くと   <br/>
RESTfulなアプリを早くシンプルに作るのであれば、自分だったらDropwizardを採用します。  <br/>
ソースもシンプルでわかり易く拡張もしやすいように感じます。        <br/>
(いまの時代、単体テストという面だけでいうとDIである必要もあまりないと思っています。)</p>

<p>Qiitaに書きました</p>

<p><a href="http://qiita.com/ko2ic/items/742fe630246848137c20">http://qiita.com/ko2ic/items/742fe630246848137c20</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DropwizardでGuiceを利用してトランザクション境界を変える]]></title>
    <link href="http://ko2ic.github.io/blog/2014/06/23/dropwizard-guice-ddd/"/>
    <updated>2014-06-23T23:12:24+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/06/23/dropwizard-guice-ddd</id>
    <content type="html"><![CDATA[<p>dropwizardでDDDをやるためにguiceを使ってみました。  <br/>
今の時代、DIコンテナを使う理由はほとんどトランザクション境界を永続化層に依存させたくないからじゃないのかなと思います。  <br/>
昔は、単体テストをできるようにすることがDIを使う主な目的でしたが、今はテストフレームワークの充実で、簡単に単体テストができる時代になりました。  <br/>
ということで、トランザクション境界を変えてみたことをQiitaに記述しました。</p>

<p><a href="http://qiita.com/ko2ic/items/409bfecfd806c2f903e1">http://qiita.com/ko2ic/items/409bfecfd806c2f903e1</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropwizard-testingが便利でした]]></title>
    <link href="http://ko2ic.github.io/blog/2014/06/19/dropwizard-test/"/>
    <updated>2014-06-19T22:41:09+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/06/19/dropwizard-test</id>
    <content type="html"><![CDATA[<p>dropwizardはテストを書くのも簡単でした。  <br/>
特にIntegration Testが気楽に書ける気がします。       <br/>
この記事では、単体テストのたびにテーブルを再作成しています。     <br/>
その際にLiquibaseのAPIを利用していて、それも便利に使えそうだと思います。</p>

<p>Qiitaに書きました。</p>

<p><a href="http://qiita.com/ko2ic/items/b59447a75952703e809a">http://qiita.com/ko2ic/items/b59447a75952703e809a</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[いますぐ採用すべきJavaフレームワークDropWizard(その3)]]></title>
    <link href="http://ko2ic.github.io/blog/2014/06/13/dropwizard-3/"/>
    <updated>2014-06-13T00:39:13+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/06/13/dropwizard-3</id>
    <content type="html"><![CDATA[<p>Dropwizardについての続きです。今回はDBまわりを記述しました。
HibernateとJDBIの両方で記述しています。</p>

<p>Qiitaに書きました。</p>

<p><a href="http://qiita.com/ko2ic/items/8110f5959315d3255ae9">http://qiita.com/ko2ic/items/8110f5959315d3255ae9</a></p>

<p>元々、3回くらいの記事にまとめようと思って書いたので、一つ一つの記事にあまり、関連性がありません。  <br/>
また、説明も下手（喋るのも文章もどっちも言っている意味がわからない人）なので読みづらいかもしれません。</p>

<p>他の人にも有用になるように、なるべく自分の意見を記述しないで、事実のみを書くつもりでした。    <br/>
が、今読み返してみると自分の考えを多々書いてありますね。 <br/>
自分には客観的に書くのは難しかったです。</p>

<p>今後、Dropwizardについてもっと勉強しようと思ったことは、以下になります。</p>

<ul>
<li>Guiceか、何かのDIコンテナを使って、Resourceではないクラス（例えば、Facade）をトランザクション境界にしてみる。</li>
<li>単体テスト周り（dropwizard-testing）</li>
<li>Hibernate・JDBIでないFWに変えてみる</li>
<li>自作のManaged ObjectsやCommandsなどを試してみる</li>
</ul>


<p>です。</p>

<p>気になる点は、ホットデプロイの機能が今のところ無さそうなところです。 <br/>
そういう意味では、Spring Bootの勉強もやろうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropwizard(Java)でrailsのようにDBマイグレーションをする]]></title>
    <link href="http://ko2ic.github.io/blog/2014/06/13/dropwizard-liquibase/"/>
    <updated>2014-06-13T00:33:09+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/06/13/dropwizard-liquibase</id>
    <content type="html"><![CDATA[<p>DropwizardでのDBマイグレーションについて書きました。      <br/>
ほとんどLiquibaseの説明ですが、DBのスキーマをgitやSVNなどのソース管理システムで管理できるのがとても良いです。     <br/>
便利なので、ぜひ色々な現場で使ってほしいと思いました。</p>

<p>Qiitaに書きました。</p>

<p><a href="http://qiita.com/ko2ic/items/02da56fd64ec39562bec">http://qiita.com/ko2ic/items/02da56fd64ec39562bec</a></p>
]]></content>
  </entry>
  
</feed>
