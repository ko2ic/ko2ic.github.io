<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dropwizard | ko2ic Blog]]></title>
  <link href="http://ko2ic.github.io/blog/categories/dropwizard/atom.xml" rel="self"/>
  <link href="http://ko2ic.github.io/"/>
  <updated>2015-01-18T01:44:13+09:00</updated>
  <id>http://ko2ic.github.io/</id>
  <author>
    <name><![CDATA[Koji Ishii]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ツールとして利用できるDropwizard]]></title>
    <link href="http://ko2ic.github.io/blog/2014/08/07/dropwizard-as-tool/"/>
    <updated>2014-08-07T01:47:37+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/08/07/dropwizard-as-tool</id>
    <content type="html"><![CDATA[<p>Dropwizardはwebアプリとしてではなく、ユーザに配布するツールを作成するときにも役に立ちます。</p>

<p>どういうことかというと、dropwizard-configurationというjarだけを利用しましょうということです。<br></p>

<p>詳しくは、<a href="http://qiita.com/ko2ic/items/7cefba83be29f8129595">Dropwizardで気軽にユーザ向けのツールを作成する </a>に記述しています。</p>

<p>自分の場合で恐縮なのですが、ソフトアーキテクチャで意識するのは、プロジェクト間の依存関係を疎結合にすることです。<br>
そうすることで、いつでも他のプロジェクトでも利用できるし、その部分だけをまるっと気軽に交換できるからです。<br></p>

<p>Dropwizardではまさにそれを高いレベルでやってのけています。<br>
なので、RESTフレームワークであるはずのDropwizardをwebとは関係のないツールで便利に利用できるわけです。</p>

<p>この記事も以前書いた「<a href="http://qiita.com/ko2ic/items/b59447a75952703e809a">dropwizard-testingが便利でした</a>」と同じくらい有用なことを書いたつもりなので、ぜひ試してみてください。<br></p>

<p>サンプルソースはこちらです。<br>
<a href="https://github.com/ko2ic/spike-groovy-executable-jar">https://github.com/ko2ic/spike-groovy-executable-jar</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring BootとDropwizardのアプリコード比較]]></title>
    <link href="http://ko2ic.github.io/blog/2014/06/29/springboot-dropwizard/"/>
    <updated>2014-06-29T21:54:04+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/06/29/springboot-dropwizard</id>
    <content type="html"><![CDATA[<p>Spring BootとDropwizardの比較をしてみました。<br>
記事は<a href="http://qiita.com/ko2ic/items/742fe630246848137c20">こちら</a>です。</p>

<p>以下は自分の意見です。<br></p>

<p>いまのところはDropwizardの方がいいかなぁというのが結論です。</p>

<p>ソースの比較をするとSpring Bootの方が記述量も少なくて優れているように思えます。<br>  <br/>
しかし、実際はDropwizardでは迷うことがなく実装ができ、Spring Bootでは悩むことが多かったです。<br></p>

<p>おそらく、<br>
Spring Bootは多機能で色々なことができるためソースも多く、調査が大変 &ndash;> ごちゃついてる気がするのだと思います。<br>
ただ、この感覚は単純にDropwizardの得意な分野で比較したのが理由かもしれません。</p>

<p>ここで、話は脱線しますが、久々のSpringについても書いておきます。<br></p>

<p>Springに関しては元々大好きなフレームワークの一つです。<br>
ソースもきれいでわかりやすく、非常に勉強になりました。<br>
きれいなソースと言えば、Seasarプロジェクト（特に本体とSaStruts,S2JDBC）もそうでした。<br>
反対にStruts,Myfacesなどは汚いと思いました。<br>
(きれいなフレームワークは比較的に長生きしているので、その点Dropwizardもきれいなので長生きするかも）</p>

<p>今の時代では、当たり前に利用されているSpringですが、おそらく日本では業務で最も早く利用したプロジェクトに運良く参加していました。<br>
それからバージョン3まで仕事で利用し、Spring MVC, Spring Web Flow, Spring Batch, Spring Securityなど多くのSpringプロダクトを利用していました。</p>

<p>しかし、5年ぶりに実装してみて「こんなにめんどくさかったっけ？」と感じました。<br>
Springも巨大になりすぎたのかなと思います。<br>
手を動かしてはいないですが、ずーと追ってはいたので昔の知識で止まっていたわけではないつもりです。<br>
あれからGuiceなど軽量なDIができたこともあり、そちらで十分な気もします。<br></p>

<p>話は戻して、Spring BootとDropwizardについてです。<br>
Spring Bootは機能過多な気もしますが、それもメリットとも言えるので、慣れてくれば、Spring Bootの方が良くなるかもしれません。<br>
ちょっとしたホットデプロイならできるので、それも少しメリットかもしれません。<br>
(が、完全じゃないので微妙）</p>

<p>ただ、現在の感想としては<br>
RESTfulなアプリを早くシンプルに作るのであれば、自分だったらDropwizardを採用します。<br>
ソースもシンプルでわかり易く拡張もしやすいように感じます。<br>        <br/>
(いまの時代、単体テストという面だけでいうとDIである必要もあまりないと思っています。)</p>

<p>Spring Bootは機能過多になったSpringプロジェクトをうまいこと使い易くしてくれる可能性がありそうなので、今後に期待しています。<br>
もっと洗練されて昔のSpringのようにシンプルで、使い易いものになってほしいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DropwizardでGuiceを利用してトランザクション境界を変える]]></title>
    <link href="http://ko2ic.github.io/blog/2014/06/23/dropwizard-guice-ddd/"/>
    <updated>2014-06-23T23:12:24+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/06/23/dropwizard-guice-ddd</id>
    <content type="html"><![CDATA[<p>Dropwizardで試したいことの一つとして、トランザクション境界を変えるというものがありました。<br></p>

<p>今回は、それをDDDでやるためにguiceを使ってみました。<br></p>

<p>今の時代、DIコンテナを使う理由はほとんどトランザクション境界を永続化層に依存させたくないからじゃないのかなと思います。<br>
昔は、単体テストをできるようにすることがDIを使う主な目的でしたが、今はJmockitなどモックフレームワークの充実で、簡単に単体テストができる時代になりました。</p>

<p>ということで、トランザクション境界を変えてみたことをQiitaに記述しました。
<a href="http://qiita.com/ko2ic/items/409bfecfd806c2f903e1">http://qiita.com/ko2ic/items/409bfecfd806c2f903e1</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropwizard-testingが便利でした]]></title>
    <link href="http://ko2ic.github.io/blog/2014/06/19/dropwizard-test/"/>
    <updated>2014-06-19T22:41:09+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/06/19/dropwizard-test</id>
    <content type="html"><![CDATA[<p>dropwizardはテストを書くのも簡単でした。<br>
特にIntegration Testが気楽に書けました。<br></p>

<p><a href="http://qiita.com/ko2ic/items/b59447a75952703e809a">Qiitaに書いた記事</a>では、単体テストのたびにテーブルを再作成しています。<br></p>

<p>その際にLiquibaseのAPIを利用しています。<br>
実際のプロジェクトでもこの機構は使えます。</p>

<p>この記事はQitaやアクセス数を見ると全然人気がないのですが、自分の書いたDropwizardの中でももっとも有用な記事の一つではないかと思っていたります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropwizard(Java)でrailsのようにDBマイグレーションをする]]></title>
    <link href="http://ko2ic.github.io/blog/2014/06/13/dropwizard-liquibase/"/>
    <updated>2014-06-13T00:33:09+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/06/13/dropwizard-liquibase</id>
    <content type="html"><![CDATA[<p>DropwizardでのDBマイグレーションについて書きました。<br></p>

<p>ほとんどLiquibaseの説明です。
これを使うと「DBのスキーマをgitやSVNなどのソース管理システムで管理できる」のがとても良いです。<br></p>

<p>これによりJavaでもアジャイルに開発しやすくなると思います。</p>

<p>記事はこちらです。<br>
<a href="http://qiita.com/ko2ic/items/02da56fd64ec39562bec">http://qiita.com/ko2ic/items/02da56fd64ec39562bec</a></p>
]]></content>
  </entry>
  
</feed>
