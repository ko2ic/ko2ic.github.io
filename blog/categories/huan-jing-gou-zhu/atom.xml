<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 環境構築 | ko2ic Blog]]></title>
  <link href="http://ko2ic.github.io/blog/categories/huan-jing-gou-zhu/atom.xml" rel="self"/>
  <link href="http://ko2ic.github.io/"/>
  <updated>2015-01-19T00:49:03+09:00</updated>
  <id>http://ko2ic.github.io/</id>
  <author>
    <name><![CDATA[Koji Ishii]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Windows環境構築手順]]></title>
    <link href="http://ko2ic.github.io/blog/2015/01/17/windows-env/"/>
    <updated>2015-01-17T19:34:30+09:00</updated>
    <id>http://ko2ic.github.io/blog/2015/01/17/windows-env</id>
    <content type="html"><![CDATA[<h1>Chocolatey</h1>

<p>まずはChocolateyのインストール。 <br/>
<a href="https://chocolatey.org/">公式ページ</a>に書いてある通りにします。</p>

<p><code>
C:\&gt;  @powershell -NoProfile -ExecutionPolicy unrestricted -Command "iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))" &amp;&amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin
</code></p>

<p>次にパッケージをインストールします。 <br/>
これは、<code>pacakages.config</code> に記述しておきます。 <br/>
自分の場合は以下です。</p>

<p>```xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
<packages>
  <package id="launchy"/>
  <package id="GoogleChrome"/></p>

<!-- vmwareの場合は以下はmacで入れるためwindowsにはいれない
  <package id="jdk8"/>
  <package id="maven"/>
  <package id="apache.ant"/>
  <package id="gradle"/>

  <package id="virtualbox" version="4.3.12"/>-->


<p> <!-- これより上のバージョンだと動作しなかった --></p>

<!--
  <package id="vagrant"/>
  <package id="nodejs" version="0.10.33"/>-->


<p> <!--0.10.34は次の原因による動作せず-> <a href="https://github.com/joyent/node/issues/8894">https://github.com/joyent/node/issues/8894</a> &mdash;></p>

<!--
  <package id="python2"/>
  <package id="npm"/>

  <package id="dropbox"/>
  <package id="tortoisesvn"/>
  <package id="evernote"/>
  <package id="skype"/>
-->


<p></packages>
```</p>

<p><code>
C:\ cinst packages.config
</code></p>

<h1>Cygwin</h1>

<p>次はコマンドプロンプトやCygwinを便利にします。 <br/>
以前に記述したQiitaの記事の通り設定します。</p>

<p><a href="http://qiita.com/ko2ic/items/2574139dd095e5a31e76">ChocolateyでCygwin（C:¥に）インストール・設定する</a></p>

<h1>Launchy</h1>

<p>次にlanchyの設定をします。 <br/>
ホットキーを <code>alt + space</code> にします。 <br/>
また、<code>launchy</code>フォルダを作り、以下のように検索対象のディレクトリに指定する。</p>

<p><img src="https://raw.githubusercontent.com/wiki/ko2ic/ko2ic.github.io/images/2015-01-17-windows-env/launchy.png" alt="launchy" /></p>

<p>このフォルダに検索対象のショートカットを入れたり、シンボリックリンク( <code>mklink</code> コマンドで)などを入れます。 <br/>
例えば、Cygwinのショートカットを入れて、Launchyの設定で「実行可能ファイルも含む」にチェックに入れるとLaunchyで起動できます。</p>

<h1>キーボード割り当て</h1>

<p>普段macを利用しているので、caps lockをCtrlに変えたいです。</p>

<p>以下の内容でchangeCapsLockToCtrl.regという名前で保存しておきます。
これを実行すると変更されます。（レジストリをいじってるので自己責任でお願いします。）
<code>
REGEDIT4
[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
"Scancode Map"=hex:00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac環境構築（VM Ware）]]></title>
    <link href="http://ko2ic.github.io/blog/2014/10/17/env-vmware-win/"/>
    <updated>2014-10-17T16:34:37+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/10/17/env-vmware-win</id>
    <content type="html"><![CDATA[<p>環境を再構築するときに忘れないようにメモ</p>

<p>VMwareのスナップショットはファイルで保存されます。        <br/>
TimeMachineはファイルの更新日付を見て、対象ファイルかを判断しています。 <br/>
なので、例えば仮想環境のwindowsに100GB割り当てていれて、windows上で何かをすると100GBのファイルが更新され、TimeMachine対象ファイルになってしまいます。</p>

<p>ということで、仮想環境で差分バックアップすればいいのです。</p>

<p>VMWareではそれをAutoProtectで実現できます。 <br/>
以下が自分の設定です。</p>

<p><img src="https://raw.githubusercontent.com/wiki/ko2ic/ko2ic.github.io/images/2014-10-17-env-vmware-win/autoprotect.png" alt="autoprotect" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac環境構築（CocoaPods）]]></title>
    <link href="http://ko2ic.github.io/blog/2014/05/27/cocoapods/"/>
    <updated>2014-05-27T20:17:09+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/05/27/cocoapods</id>
    <content type="html"><![CDATA[<p>環境構築でiphone開発のことを忘れていたので追加</p>

<h2>CocoaPods</h2>

<p><a href="http://ko2ic.github.io/blog/2014/05/21/octopress/" title="Octopress構築">Octopress環境構築</a>でruby環境は整っているので、CocoaPodsをインストールする.</p>

<pre><code>$ gem install -V cocoapods
$ rbenv rehash
$ which pod
~/.rbenv/shims/pod
</code></pre>

<p>~/.cocoapodsを作成してライブラリの管理をする準備をするために以下のコマンド。</p>

<pre><code>$ pod setup
Setup completed (read-only access)
</code></pre>

<p>試しにPodfileのあるディレクトリで</p>

<pre><code>$ pod install
・・・
Integrating client project
</code></pre>

<h2>Alcatraz</h2>

<p>Xcode上でテンプレートやテーマやPluginをインストールできるPlugin。以下でインストール。</p>

<pre><code>curl -fsSL https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh | sh
</code></pre>

<p>Xcodeで「xcworkspace」ファイルを開く <br/>
メニューのWindow > Package Managerがあれば成功</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress構築]]></title>
    <link href="http://ko2ic.github.io/blog/2014/05/21/octopress/"/>
    <updated>2014-05-21T00:00:20+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/05/21/octopress</id>
    <content type="html"><![CDATA[<p>OSのクリーンインストールをしたのでこのブログも入れ直す</p>

<h2>ソースを取得</h2>

<p>自分の場合はbitbuketにこのブログを保存しているので、そこから取得する</p>

<pre><code>$ git clone  git@bitbucket.org:&lt;user name&gt;/ko2ic.github.io.git
</code></pre>

<p>初めての場合はoctopress本体を取得する</p>

<pre><code>$ git clone git@github.com:imathis/octopress.git
</code></pre>

<h2>ruby</h2>

<p>自分の環境はhomebrewでreadline,ruby-build,rbenvをインストール済みです。<br/>
詳しくは<a href="https://github.com/ko2ic/dotfiles">こちらを参考</a></p>

<pre><code>$ brew bundle
</code></pre>

<p>PATHにrbenvを通す<br/>
古い記事だと~/.rbenv/binになっているので注意。</p>

<p><code>sh .bash_profile
PATH=${HOME}/.rbenv/shims:$PATH
</code></p>

<p>rubyはrbenvでインストールする</p>

<pre><code>$ rbenv install 2.1.0
$ rbenv rehash
</code></pre>

<p>rbenvで使用するrubyバージョンを指定する。</p>

<pre><code>$ rbenv global 2.1.0
$ rbenv global
2.1.0
</code></pre>

<p>bundlerをインストール</p>

<pre><code>$ rbenv exec gem install bundler
$ rbenv exec gem list
bigdecimal (1.2.3)
bundler (1.6.2)
io-console (0.4.2)
json (1.8.1)
minitest (4.7.5)
psych (2.0.2)
rake (10.1.0)
rdoc (4.1.0)
test-unit (2.1.0.0)
</code></pre>

<!-- more -->


<h2>octopress初期設定</h2>

<p>このプロジェクト用の必要なgemをインストール</p>

<pre><code>$ bundle install --path vendor/bundle
</code></pre>

<p>github pageに設定する<br/>
デプロイ先を聞かれるので入力する。下は自分の場合です。</p>

<pre><code>$ bundle exec rake setup_github_pages
 git@github.com:ko2ic/ko2ic.github.io.git
</code></pre>

<h2>ブログを書く</h2>

<p>ページを作成する<br/>
ここのtitleはurlに使われるので注意。</p>

<pre><code>$ bundle rake new_post['title']
$ bundle exec rake generate
</code></pre>

<p>以下のブログがMarkdownのリファレンスに役立ちます。 <br/>
<a href="http://blog.seak.jp.net/blog/2014/04/24/octopress-markdown-quick-reference/">http://blog.seak.jp.net/blog/2014/04/24/octopress-markdown-quick-reference/</a></p>

<p>ローカルで検証する <a href="http://localhost:4000">http://localhost:4000</a></p>

<pre><code>$ bundle exec rake preview
</code></pre>

<p>別のターミナルで以下を入力しておくことで、rake generateしなくても変更を検知してリビルドしてくれる</p>

<pre><code>$ bundle exec rake watch
</code></pre>

<h2>本番に反映する</h2>

<pre><code>$ bundle exec rake gen_deploy
</code></pre>

<h2>bitbuketへ</h2>

<h4>まだbitbcketで管理してない場合</h4>

<p>bitbuketという名前で管理する</p>

<pre><code>$ git remote add bitbucket git@bitbucket.org:&lt;user name&gt;/ko2ic.github.io.git
$ git add -a -m "add article"
$ git push -u bitbucket source
</code></pre>

<h3>自分のbitbuketから取得した場合</h3>

<p>自分のbitbuketから取得しているので、origin</p>

<pre><code>$ git commit -a -m "add article"
$ git push origin source
</code></pre>

<h2>参考</h2>

<p>ruby周りは以下のサイトを参考にしました。<br>
<a href="http://qiita.com/emadurandal/items/a60886152a4c99ce1017">http://qiita.com/emadurandal/items/a60886152a4c99ce1017</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac環境構築手順]]></title>
    <link href="http://ko2ic.github.io/blog/2014/05/20/mac-env-init2/"/>
    <updated>2014-05-20T20:43:42+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/05/20/mac-env-init2</id>
    <content type="html"><![CDATA[<p>前回は、手動での作業を書いたので、今日は半自動な構築部分を記述しておきます。</p>

<h2>Macportsからhomebrewへ</h2>

<p>ずーとmacportsを使っていました。<br>
しかし、homebrew-caskで.dmgなアプリも自動で入れたいので、今更ですが乗り換えました。</p>

<p>macportsにも利点があります。<br>
それは「/optにすべてがインストールされる」に集約されると思います。<br/>
例えば</p>

<ul>
<li>ディレクトリrsyncすれば他のmacと共通の環境ができる</li>
<li>問題が起きたときなどにoptをrenameしてみて、入れ直したり、元に戻したりが気楽にできる</li>
<li>/usr/localは自分で入れたものにしかない状態はわかりやすい</li>
</ul>


<p>こういった利点があるのでmacportsを使っていましたが、その利点を余りあるほどcaskが便利そうだと思ったので乗り換えました。</p>

<p>この記事ではすでにgithubで管理しているBrewfileを使うので細かい説明は書きません。<br>
（自分が書くよりもわかりやすい記事がたくさんあります）<br>
よって完全に自分のためだけのメモになります。</p>

<!-- more -->


<h2>dotfiles</h2>

<p>${HOME}に.bash_profileなどの自分用の設定をおきます。</p>

<pre><code>$ git clone https://github.com/ko2ic/dotfiles.git
$ cd dotfiles
$ chmod 766 dotfiles.sh
$ ./dotfiles.sh
$ source ~/.bash_profile
</code></pre>

<h2>Xcode</h2>

<ul>
<li>App StoreからXcodeを検索してインストール</li>
<li>Xcodeを起動して同意する</li>
<li><code>$ xcode-select --install</code>でCommand Line Toolをインストール</li>
</ul>


<h2>homebrew &amp; cask</h2>

<p>Brewfileに記述したアプリをインストールします。</p>

<pre><code>$ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
$ brew bundle
</code></pre>

<h2>NeoBundle</h2>

<pre><code>$ curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh | sh
$ vim .
:NeoBundleInstall
</code></pre>

<h2>Git Settings</h2>

<pre><code>$ git config --global user.name "kouji ishii"
$ git config --global user.email ko2ic.dev@gmail.com
$ git config --global core.excludesfile ~/.gitignore
$ git config --global core.editor "/usr/local/bin/vim"
</code></pre>

<h2>Screen</h2>

<p>縦分割できるScreenを使いたいので個別に入れます。</p>

<pre><code>$ brew install --HEAD -f screen
</code></pre>

<h2>アプリ設定</h2>

<h4>Alfred</h4>

<p>ホットキーをaltのダブルタップに変更する</p>

<p><img src="/images/mac-env-init/alfred.png" alt="alfred" /></p>

<h4>divvy</h4>

<p>以下のURLのように設定をする</p>

<p><a href="http://mizage.com/help/accessibility.html">http://mizage.com/help/accessibility.html</a></p>
]]></content>
  </entry>
  
</feed>
