<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 環境構築 | ko2ic Blog]]></title>
  <link href="http://ko2ic.github.io/blog/categories/huan-jing-gou-zhu/atom.xml" rel="self"/>
  <link href="http://ko2ic.github.io/"/>
  <updated>2014-06-30T00:45:22+09:00</updated>
  <id>http://ko2ic.github.io/</id>
  <author>
    <name><![CDATA[Koji Ishii]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mac環境構築（CocoaPods）]]></title>
    <link href="http://ko2ic.github.io/blog/2014/05/27/cocoapods/"/>
    <updated>2014-05-27T20:17:09+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/05/27/cocoapods</id>
    <content type="html"><![CDATA[<p>環境構築でiphone開発のことを忘れていたので追加</p>

<h2>CocoaPods</h2>

<p><a href="http://ko2ic.github.io/blog/2014/05/21/octopress/" title="Octopress構築">Ruby</a>でruby環境は整っているので、CocoaPodsをインストールする.</p>

<pre><code>$ gem install -V cocoapods
$ rbenv rehash
$ which pod
~/.rbenv/shims/pod
</code></pre>

<p>~/.cocoapodsを作成してライブラリの管理をする準備をするために以下のコマンド。</p>

<pre><code>$ pod setup
Setup completed (read-only access)
</code></pre>

<p>試しにPodfileのあるディレクトリで</p>

<pre><code>$ pod install
・・・
Integrating client project
</code></pre>

<h2>Alcatraz</h2>

<p>Xcode上でテンプレートやテーマやPluginをインストールできるPlugin。以下でインストール。</p>

<pre><code>curl -fsSL https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh | sh
</code></pre>

<p>Xcodeで「xcworkspace」ファイルを開く <br/>
メニューのWindow > Package Managerがあれば成功</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress構築]]></title>
    <link href="http://ko2ic.github.io/blog/2014/05/21/octopress/"/>
    <updated>2014-05-21T00:00:20+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/05/21/octopress</id>
    <content type="html"><![CDATA[<p>OSのクリーンインストールをしたのでこのブログも入れ直す</p>

<h2>ソースを取得</h2>

<p>自分の場合はbitbuketにこのブログを保存しているので、そこから取得する</p>

<pre><code>$ git clone  git@bitbucket.org:&lt;user name&gt;/ko2ic.github.io.git
</code></pre>

<p>初めての場合はoctopress本体を取得する</p>

<pre><code>$ git clone git@github.com:imathis/octopress.git
</code></pre>

<h2>ruby</h2>

<p>自分の環境はhomebrewでreadline,ruby-build,rbenvをインストール済みです。<br/>
詳しくは<a href="https://github.com/ko2ic/dotfiles">こちらを参考</a></p>

<pre><code>$ brew bundle
</code></pre>

<p>PATHにrbenvを通す<br/>
古い記事だと~/.rbenv/binになっているので注意。</p>

<p><code>sh .bash_profile
PATH=${HOME}/.rbenv/shims:$PATH
</code></p>

<p>rubyはrbenvでインストールする</p>

<pre><code>$ rbenv install 2.1.0
$ rbenv rehash
</code></pre>

<p>rbenvで使用するrubyバージョンを指定する。</p>

<pre><code>$ rbenv global 2.1.0
$ rbenv global
2.1.0
</code></pre>

<p>bundlerをインストール</p>

<pre><code>$ rbenv exec gem install bundler
$ rbenv exec gem list
bigdecimal (1.2.3)
bundler (1.6.2)
io-console (0.4.2)
json (1.8.1)
minitest (4.7.5)
psych (2.0.2)
rake (10.1.0)
rdoc (4.1.0)
test-unit (2.1.0.0)
</code></pre>

<!-- more -->


<h2>octopress初期設定</h2>

<p>このプロジェクト用の必要なgemをインストール</p>

<pre><code>$ bundle install --path vendor/bundle
</code></pre>

<p>github pageに設定する<br/>
デプロイ先を聞かれるので入力する。下は自分の場合です。</p>

<pre><code>$ bundle exec rake setup_github_pages
 git@github.com:ko2ic/ko2ic.github.io.git
</code></pre>

<h2>ブログを書く</h2>

<p>ページを作成する<br/>
ここのtitleはurlに使われるので注意。</p>

<pre><code>$ rake new_post['title']
$ bundle exec rake generate
</code></pre>

<p>ローカルで検証する <a href="http://localhost:4000">http://localhost:4000</a></p>

<pre><code>$ bundle exec rake preview
</code></pre>

<p>別のターミナルで以下を入力しておくことで、rake generateしなくても変更を検知してリビルドしてくれる</p>

<pre><code>$ bundle exec rake watch
</code></pre>

<h2>bitbuketへ</h2>

<h4>まだbitbcketで管理してない場合</h4>

<p>bitbuketという名前で管理する</p>

<pre><code>$ git remote add bitbucket git@bitbucket.org:&lt;user name&gt;/ko2ic.github.io.git
$ git add -a -m "add article"
$ git push -u bitbucket source
</code></pre>

<h3>自分のbitbuketから取得した場合</h3>

<p>自分のbitbuketから取得しているので、origin</p>

<pre><code>$ git commit -a -m "add article"
$ git push origin source
</code></pre>

<h2>参考</h2>

<p>ruby周りは以下のサイトを参考にしました
<a href="http://qiita.com/emadurandal/items/a60886152a4c99ce1017">http://qiita.com/emadurandal/items/a60886152a4c99ce1017</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac環境構築手順]]></title>
    <link href="http://ko2ic.github.io/blog/2014/05/20/mac-env-init2/"/>
    <updated>2014-05-20T20:43:42+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/05/20/mac-env-init2</id>
    <content type="html"><![CDATA[<p>前回は、手動での作業を書いたので、今日は半自動な構築部分を記述しておきます。</p>

<h2>Macportsからhomebrewへ</h2>

<p>ずーとmacportsを使っていたのですが、homebrew-caskで.dmgなアプリも自動で入れたいので、今更ですが乗り換えました。</p>

<p>macportsにも利点があって、それは「/optにすべてがインストールされる」に集約されると思います。<br/>
例えば</p>

<ul>
<li>ディレクトリrsyncすれば他のmacと共通の環境ができる</li>
<li>問題が起きたときなどにoptをrenameしてみて、入れ直したり、元に戻したりが気楽にできる</li>
<li>/usr/localは自分で入れたものにしかない状態はわかりやすい</li>
</ul>


<p>こういった利点があるので変えていなかったのですが、その利点を余りあるほどcaskが便利そうだと思ったので乗り換えました。</p>

<p>この記事ではすでにgithubで管理しているBrewfileを使うので細かい説明は書きません。（そこら中に記事があるので自分が書く必要もないので） <br/>
よって完全に自分のためだけのメモになります。</p>

<!-- more -->


<h2>dotfiles</h2>

<p>${HOME}に.bash_profileなどの自分用の設定をおきます。</p>

<pre><code>$ git clone https://github.com/ko2ic/dotfiles.git
$ cd dotfiles
$ chmod 766 dotfiles.sh
$ ./dotfiles.sh
$ source ~/.bash_profile
</code></pre>

<h2>Xcode</h2>

<ul>
<li>App StoreからXcodeを検索してインストール</li>
<li>Xcodeを起動して同意する</li>
<li><code>$ xcode-select -install</code>でCommand Line Toolをインストール</li>
</ul>


<h2>homebrew &amp; cask</h2>

<p>Brewfileに記述したアプリをインストールします。</p>

<pre><code>$ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
$ brew bundle
</code></pre>

<h2>NeoBundle</h2>

<pre><code>$ curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh | sh
$ vim .
:NeoBundleInstall
</code></pre>

<h2>Git Settings</h2>

<pre><code>$ git config --global user.name "kouji ishii"
$ git config --global user.email ko2ic.dev@gmail.com
$ git config --global core.excludesfile ~/.gitignore
$ git config --global core.editor "/usr/local/bin/vim"
</code></pre>

<h2>Screen</h2>

<p>縦分割できるScreenを使いたいので個別に入れます。</p>

<pre><code>$ brew install --HEAD -f screen
</code></pre>

<h2>アプリ設定</h2>

<h4>Alfred</h4>

<p>ホットキーをaltのダブルタップに変更する</p>

<p><img src="/images/mac-env-init/alfred.png" alt="alfred" /></p>

<h4>divvy</h4>

<p>以下のURLのように設定をする</p>

<p><a href="http://mizage.com/help/accessibility.html">http://mizage.com/help/accessibility.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac環境構築手順(GUI編)]]></title>
    <link href="http://ko2ic.github.io/blog/2014/05/18/mac-env-init/"/>
    <updated>2014-05-18T19:20:40+09:00</updated>
    <id>http://ko2ic.github.io/blog/2014/05/18/mac-env-init</id>
    <content type="html"><![CDATA[<p>macをクリーンインストールすることになったので、環境構築を自分用の備忘録として残しておきます。<br/>
基本的に自分が使いやすいようにしています。</p>

<h2>このページで書かないこと</h2>

<ul>
<li>homebrew-caskやdotfileなど自動でできること</li>
</ul>


<h2>このページで書くこと</h2>

<ul>
<li>GUIで設定すること</li>
<li>defaultsコマンドで設定すること</li>
</ul>


<h4>defaultsコマンドについて</h4>

<p>defaultsコマンドは「plist」と呼ばれるアプリやシステムの設定ファイルに、設定値を追加、変更、削除、検索するコマンドで以下のファイルが変更されます。</p>

<pre><code>~/Library/Preferences/~.plist
</code></pre>

<p>以下のコマンドで上記のファイルを表示します</p>

<pre><code>defaults read キー名
</code></pre>

<p>以下でキーに対応する値を削除できる<br>
但しキー自体は削除されないのでplistファイル自体を削除します。</p>

<pre><code>defaults delete キー名
</code></pre>

<p>それぞれの隠し機能のコマンドで変更した場合は以下のように再起動をして反映させましょう。</p>

<pre><code>killall Finder
killall Dock
</code></pre>

<!-- more -->


<h2>キーボード</h2>

<p>システム環境設定　→　キーボード　→　</p>

<h4>capsキー変更（日本語キーボード）</h4>

<p>macは、windowsでのショートカットで利用するCtrlの役割がcommandになる。<br/>
（例：command+C コピー）<br>
windowsのCtrlの位置がmacのcapsの位置にあるので、同じ配置でできるように変更する</p>

<p>→　修飾キー<br>　
Caps Lock を Commandに変更</p>

<p><img src="/images/mac-env-init/keyboard-caps-change.png" alt="caps" /></p>

<h4>ファンクションキーの動作を変更</h4>

<p>デフォルトでは以下の動作になるために逆になるように変更する</p>

<ul>
<li>F1キーだけを押下するとディスプレイが暗くなる</li>
<li>fnキー+F1でファンクションキーの動作</li>
</ul>


<p>→　F1、F2などの・・・にチェックを入れる</p>

<p><img src="/images/mac-env-init/keyboard-function-key.png" alt="function" /></p>

<h3>Windowの切り替え</h3>

<p>Windowsと同じようにalt+Tabで同じアプリで開いているWindowの切り替えができるようにします。</p>

<p>→ ショートカット→ キーボード<br>
次のウィンドウを操作対象にするをデフォルトの⌘ + F1から変更する</p>

<p><img src="/images/mac-env-init/keyboard-window.png" alt="window" /></p>

<h2>トラッックパッド</h2>

<p>システム環境設定　→　トラックバッド　→</p>

<p>画像のようにすると使いやすい
<img src="/images/mac-env-init/trackpad1.png" alt="trackpad1" />
<img src="/images/mac-env-init/trackpad2.png" alt="trackpad2" /></p>

<h2>Finder</h2>

<p>Finder →　環境設定　→　詳細</p>

<h4>拡張子を表示</h4>

<p>「すべてのファイル名拡張子を表示」をチェック</p>

<h4>確実にごみ箱を空にする</h4>

<p>チェックする</p>

<h4>検索実行時の検索対象を変更</h4>

<p>「検索実行時」を「現在のフォルダ内を検索」</p>

<p><img src="/images/mac-env-init/finder1.png" alt="finder" /></p>

<h4>新規Finderで開く先を変更</h4>

<p>一般タブで「新規Finderウィンドウで次を表示」でホームを選択する</p>

<h4>隠しファイルを表示する</h4>

<p>デフォルトではFinder上で「.」ファイルは不可視なのでこれを変更する</p>

<pre><code>defaults write com.apple.finder AppleShowAllFiles -boolean true
</code></pre>

<h4>終了できるようにする</h4>

<p>デフォルトではFinderに終了がないのでこれを変更する</p>

<pre><code>defaults write com.apple.finder QuitMenuItem -bool true
</code></pre>

<h4>タイトルにフルパスを表示する</h4>

<p>ウインドウタイトルにもパスを表示する</p>

<pre><code>defaults write com.apple.finder _FXShowPosixPathInTitle -bool true
</code></pre>

<h4>ネットワーク上に.DS_Storeを作らない</h4>

<p>Mac OS Xでは、フォルダの表示形式を変更すると「.DS_Store」という不可視ファイルができるが、これをネットワーク上には作らなくする</p>

<pre><code>defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool YES
</code></pre>

<h2>Dock</h2>

<p> システム環境設定→　Dock</p>

<h4>Dockを自動で隠す</h4>

<p><img src="/images/mac-env-init/dock.png" alt="Dock" /></p>

<h4>隠しているアプリを半透明で表示する</h4>

<pre><code>defaults write com.apple.Dock showhidden -boolean true
</code></pre>

<h2>Mission Control</h2>

<p> システム環境設定→　Mission Control</p>

<p><img src="/images/mac-env-init/mission-control.png" alt="mission" /></p>

<h4>ダッシュボードを起動させない</h4>

<pre><code>defaults write com.apple.dashboard mcx-disabled -boolean YES
</code></pre>

<h2>その他</h2>

<h4>残バッテリーを表示する</h4>

<p><img src="/images/mac-env-init/percent.png" alt="battery" /></p>

<h4>HardDiskが遅いので早くしたい</h4>

<p>Spotlightのインデックス作成が、頻繁に行われているため、HDDが一杯になってくると、かなり遅くなります。<br>
Spotlightを使っていないなら、下記の手順でインデックス作成をしないようにすれば、緩和されます。<br>
「システム環境設定」→「Spotlight」→「プライバシー」で、除するパスを指定すると、インデックスの作成はされなくなりますが、Alfredはこのインデックスを利用しているので考えて設定しましょう。</p>
]]></content>
  </entry>
  
</feed>
